---
- name: Handling configuration for CP4D cluster
  debug:
    msg: "Handling configuration for CP4D cluster {{ current_cp4d_cluster.project }}"

- include_role:
    name: cp4d-variables
  vars:
    _p_current_cp4d_cluster: "{{ current_cp4d_cluster }}"

- set_fact:
    _current_openshift_cluster: "{{ all_config.openshift | json_query(query) | first | default({}) }}"
  vars:
    query: >-
      [?name=='{{ current_cp4d_cluster.openshift_cluster_name }}']

- fail:
    msg: "The Cloud Pak for Data license must be accepted to perform configuration tasks on the platform. \
          Ensure the 'accept_licenses' of the 'cp4d' configuration yaml is set to true or run the deployer with the --accept-all-licenses flag"
  when: _cpd_accept_licenses == False

- name: Login to the OpenShift cluster {{ current_cp4d_cluster.openshift_cluster_name }}
  include_role:
    name: openshift-login
  vars:
    _p_openshift_cluster_name: "{{ current_cp4d_cluster.openshift_cluster_name }}"

- name: Get OpenShift storage classes to use for {{ current_cp4d_cluster.project }} and storage class name {{ current_cp4d_cluster.openshift_storage_name }}
  include_role: 
    name: get-openshift-storage
  vars:
    _p_openshift_cluster_name: "{{ current_cp4d_cluster.openshift_cluster_name }}"
    _p_openshift_storage_name: "{{ current_cp4d_cluster.openshift_storage_name }}"  

- set_fact:
    _cp4d_admin_password_vault_key_name: "cp4d_admin_{{ current_cp4d_cluster.project| replace('-','_') }}_{{ current_cp4d_cluster.openshift_cluster_name| replace('-','_') }}"

- name: Validate if an existing admin password for {{ _cp4d_admin_password_vault_key_name }} exists in the vault
  include_role: 
    name: vault-get-secret
  vars:
    secret_name: "{{ _cp4d_admin_password_vault_key_name }}"
    secret_group: "{{ environment_name }}"
    _p_secret_variable: _cp4d_admin_password

- name: Error if no secret value is returned
  fail:
    msg: Unable to acquire secret value for {{ _cp4d_admin_password_vault_key_name }}
  when: 
  - _cp4d_admin_password==''
  - not cpd_dry_run

- name: Login to Cloud Pak for Data as the admin user
  include_role:
    name: cp4d-login
  vars:
    _p_cp4d_project: "{{ current_cp4d_cluster.project }}"
    _p_cp4d_password: "{{ _cp4d_admin_password }}"
  when: not cpd_dry_run

# Configure SSL certificate from the OpenShift Cluster to Cloud Pak for Data
- name: Configure Cloud Pak for Data SSL certificate
  include_role:
    name: cp4d-configure-ssl-certificate

# Audit configuration
- name: Configure Cloud Pak for Data audit
  include_role:
    name: cp4d-configure-audit

# LDAP configuration
- name: Configure Cloud Pak for Data LDAP configuration
  include_role:
    name: cp4d-configure-ldap

# Cloud Pak for Data Custom role configuration
- name: Handle Cloud Pak for Data custom roles configuration for project {{ current_cp4d_cluster.project }}
  include_role:
    name: zen-roles
  loop: "{{ all_config.zen_role | default([]) }}"
  loop_control:
    loop_var: _zen_role 

# Cloud Pak for Data User Groups Configuration
- name: Configure Cloud Pak for Data access control for project {{ current_cp4d_cluster.project }}
  include_role:
    name: zen-access-control
  loop: "{{ all_config.zen_access_control | default([]) }}"
  loop_control:
    loop_var: _zen_access_control 

# In case roles were set to state: removed, loop through the roles again to delete them
- name: Delete obsolete Cloud Pak for Data custom roles for project {{ current_cp4d_cluster.project }}
  include_role:
    name: zen-roles
  loop: "{{ all_config.zen_role | default([]) }}"
  loop_control:
    loop_var: _zen_role 

# First provision DB2 OLTP instance(s) and wait for it to cpmplete
- name: Provision or remove Db2 OLTP instances
  include_role:
    name: cp4d-instance-db2oltp
- name: Wait for Db2 OLTP instances to be provisioned
  include_role:
    name: cp4d-instance-db2oltp
  vars:
    _p_wait_instances: True

# Now provision remainder of the cartridge instances
- name: Provision or remove {{ item }} instances
  include_role:
    name: cp4d-instance-{{ item }}
  loop:
    - analyticsengine
    - cognos
    - cpd-edb
    - datastage
    - dv
    - dmc
    - openpages
    - watsonx_ai
    - watson_assistant
    - watson_discovery
    - watsonx_orchestrate

# Wait for provisioning to complete
- name: Wait for provisioning of {{ item }} instances to complete
  include_role:
    name: cp4d-instance-{{ item }}
  vars:
    _p_wait_instances: True
  loop:
    - analyticsengine
    - cognos
    - cpd-edb
    - datastage
    - dv
    - dmc
    - openpages
    - watsonx_ai
    - watson_assistant
    - watson_discovery
    - watsonx_orchestrate

- name: Create Data Management Console profiles
  include_role:
    name: cp4d-configure-dmc-profiles

# Handle instance configurations
- when: "all_config.cp4d_instance_configuration is defined"
  block:
    - set_fact:
        cp4d_instance_config: "{{ all_config.cp4d_instance_configuration|json_query(query_instance_config) | first }}"
      vars:
        query_instance_config: "[?openshift_cluster_name=='{{ current_cp4d_cluster.openshift_cluster_name }}' && project=='{{ current_cp4d_cluster.project }}']"    

    - name: Show CP4D instance configuration
      debug:
        msg: "{{ cp4d_instance_config }}"    

    - name: Configure CP4D instance authorization
      include_role:
        name: instance_configuration
      loop: "{{ cp4d_instance_config.cartridges | default([]) }}"
      loop_control:
        loop_var: _cp4d_instance

# Handle cp4d connections
- name: Handle Cloud Pak for Data Connections
  include_role:
    name: cp4d-connections
  when: "all_config.cp4d_connection is defined"        

# Handle cp4d backup-restore connections
- name: Handle Cloud Pak for Data backup-restore Connections
  include_role:
    name: cp4d-backup-restore-connections
  when: "all_config.cp4d_backup_restore_connections is defined"          