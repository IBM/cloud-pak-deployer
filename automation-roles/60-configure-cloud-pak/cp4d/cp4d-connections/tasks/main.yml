---
- name: Show CP4D connections
  debug:
    var: all_config.cp4d_connection

- tempfile:
    path: "{{ status_dir }}/cp4d"
    state: directory
  register: _cp4d_connection_temp_dir

- name: Get the Catalog 'Platform assets catalog'
  shell: "curl -s -k -H 'Authorization: Bearer {{ _cp4d_bearer_token }}' -H 'Content-Type: application/json' -X GET 'https://{{ cp4d_url.stdout }}/v2/catalogs?entity.name={{ _cp4d_all_assets_catalog_name }}'"
  register: _cp4d_get_catalog_result

- set_fact:
    _cp4d_catalog_json: "{{ _cp4d_get_catalog_result.stdout | from_json }}"

- set_fact:
    _cp4d_catalog: "{{ _cp4d_catalog_json.catalogs | json_query(_get_platform_catalog) | default([]) }}"
  vars:
    _get_platform_catalog: "[? entity.name=='{{ _cp4d_platform_assets_catalog_name }}']"

- fail:
    msg: "Unable to find Cloud Pak for Data Catalog {{ _cp4d_platform_assets_catalog_name }}"
  when: "not _cp4d_catalog|length == 1"

- name: Get the available connection types
  shell: "curl -s -k -H 'Authorization: Bearer {{ _cp4d_bearer_token }}' -H 'Content-Type: application/json' -X GET 'https://{{ cp4d_url.stdout }}/v2/datasource_types'"
  register: _cp4d_datasource_types_result

- set_fact:
    _cp4d_datasource_types: "{{ _cp4d_datasource_types_result.stdout | from_json }}"

- name: "Get all cp4d_connection database entries of current CP4D cluster {{ current_cp4d_cluster.project }} and OpenShift cluster name {{ current_cp4d_cluster.openshift_cluster_name }}"
  set_fact:
    _cp4d_db_connections: "{{ all_config.cp4d_connection | json_query(_connections_current_cluster) | default([]) }}"
  vars:
    _connection_type: "database"
    _connections_current_cluster: "[? cp4d_instance=='{{ current_cp4d_cluster.project }}' && type=='{{ _connection_type }}' && openshift_cluster_name=='{{ current_cp4d_cluster.openshift_cluster_name }}']"

#Loop through all database connections of the current CP4D instance and Openshift cluster
- name: "Loop through each cp4d connection of type database of CP4D cluster {{ current_cp4d_cluster.project }}"
  include_tasks: cp4d_db_connection.yml
  loop: "{{ _cp4d_db_connections | default([]) }}"
  loop_control:
    loop_var: _cp4d_connection

- name: Delete temporary directory 
  file:
    state: absent
    path: "{{ _cp4d_connection_temp_dir.path }}"