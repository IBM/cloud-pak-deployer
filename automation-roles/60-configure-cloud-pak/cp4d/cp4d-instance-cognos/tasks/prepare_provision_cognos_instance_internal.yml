---
- set_fact:
    _db2_instance_id: "{{ _db2_lookup_result.json.service_instances[0].id }}"

- name: Create Datasource connection details json file
  template:
    src: db2_instance_connection.json.j2
    dest: "{{ status_dir }}/cp4d/{{ current_cp4d_cluster.project }}-{{ _db2_instance_id }}-db2_instance_connection.json"

- name: Get details of internal Db2 OLTP instance {{ _cognos_instance.metastore_ref }}
  shell: |
    curl -s -k \
      -H 'Authorization: Bearer {{ _cp4d_bearer_token }}' \
      -H 'Content-Type: application/json' \
      -X POST \
      'https://{{ cp4d_url.stdout }}/icp4data/api/v1/databases/connection' \
      -T {{ status_dir }}/cp4d/{{ current_cp4d_cluster.project }}-{{ _db2_instance_id }}-db2_instance_connection.json
  register: _db2_details_result

- set_fact:
    _db2_details_result_json: "{{ _db2_details_result.stdout | from_json }}"
    _db2_instance_name: "{{ _cognos_instance.metastore_ref }}"

- name: Get the db2inst1 password of the {{ _cognos_instance.metastore_ref }} Db2 OLTP instance
  shell: |
    oc get secret \
      -n {{ current_cp4d_cluster.project }} \
      c-db2oltp-{{ _db2_instance_id }}-instancepassword \
      -o json | jq -r .data.password | base64 --decode
  register: _db2inst1_password_result

- name: Get the Db2 OLTP CA bundle from secret db2oltp-internal-tls
  shell: |
    oc extract \
      secret/db2oltp-internal-tls \
      -n {{ current_cp4d_cluster.project }} \
      --keys=ca.crt \
      --to={{ status_dir }}/tmp --confirm

- name: Copy the prepareDB2forCA script to c-db2oltp-{{ _db2_instance_id }}-db2u-0
  shell: |
    oc cp \
      -n {{ current_cp4d_cluster.project }} \
      {{ role_path }}/files/prepareDB2forCA.sh \
      c-db2oltp-{{ _db2_instance_id }}-db2u-0:/tmp

- name: Assign the execute bit to the script
  shell: |
    oc exec \
      -n {{ current_cp4d_cluster.project }} \
      c-db2oltp-{{ _db2_instance_id }}-db2u-0 -- chmod +x /tmp/prepareDB2forCA.sh

- set_fact:
    _db2_instance_host: "c-db2oltp-{{ _db2_instance_id }}-db2u"
    _db2_instance_port: "50001"
    _db2_instance_dbname: "{{ _db2_details_result_json['connection-info'].ssl.dbname }}"
    _db2_instance_user_name: "db2inst1"
    _db2_instance_password: "{{ _db2inst1_password_result.stdout }}"
    _db2_ca_crt: "{{ lookup('file', status_dir + '/tmp/ca.crt' ) | replace('\n','\\n') }}\\n"
    _cp4d_platform_connection_name: "{{ _db2_instance_name }}-connection"

- name: Run the Db2 prepare script for Db2 OLTP
  shell: |
    oc exec \
      -n {{ current_cp4d_cluster.project }} c-db2oltp-{{ _db2_instance_id }}-db2u-0 -- /tmp/prepareDB2forCA.sh {{ _db2_instance_dbname }} {{ _db2_instance_user_name }} {{ _db2_instance_password }}
  register: _prepare_db2_result

- name: Show results of Db2 OLTP preparation
  debug:
    msg: "{{ _prepare_db2_result }}"