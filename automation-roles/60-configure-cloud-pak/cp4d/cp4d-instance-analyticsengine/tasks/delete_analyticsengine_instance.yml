---
- set_fact:
    _ae_instance_name: "{{ _ae_instance.display_name }}"
    _ae_instance_id: "{{ _ae_instance.id }}"
    _ae_cartridge_listed: {}
    _delete_ae_instance: False

# If not all instances must be deleted, check if instance still in the configuration
- block:
  - set_fact:
      _ae_cartridge_listed: "{{ _analyticsengine_cartridge.instances | json_query(_query_instance) | first | default({}) }}"
    vars:
      _query_instance: "[?name=='{{ _ae_instance_name }}']" 
    when: _analyticsengine_cartridge.instances is defined
  - set_fact:
      _delete_ae_instance: True
    when: _ae_cartridge_listed == {}
  when: (_p_delete_all_instances | default(False)) == False

- set_fact:
    _delete_ae_instance: True
  when: (_p_delete_all_instances | default(False)) == True

- name: Fail if Analytics Engine instance will be deleted and destroy is not confirmed
  fail:
    msg: "Destroy was not confirmed via --confirm-destroy or global_config confirm_destroy property, will not delete Analytics Engine instance {{ _ae_instance_name }}"
  when:
  - _delete_ae_instance | bool
  - _confirm_destroy | default (False) | bool == False

- debug:
    var: _all_ae_storage_instances

- name: Find Analytics Engine storage volume for instance {{ _ae_instance_name }}
  set_fact:
    _ae_instance_storage: "{{ _all_ae_storage_instances.json.service_instances | json_query(_query_storage) | first | default({}) }}"
  vars:
    _query_storage: "[?display_name=='{{ current_cp4d_cluster.project }}::{{ _ae_instance_name }}']" 
  when: _delete_ae_instance | bool

- name: Deleting Analytics Engine instance {{ _ae_instance_name }}
  uri:
    url: 'https://{{ cp4d_url.stdout }}/zen-data/v3/service_instances/{{ _ae_instance_id }}'
    method: DELETE
    headers:
      Content-Type: application/json
      Authorization: "Bearer {{ cp4d_login.token }}"
    return_content: yes
    validate_certs: no
  register: _ae_instance_delete_result
  when: _delete_ae_instance | bool

- name: Deleting Analytics Engine instance storage volume {{ _ae_instance_name }}
  uri:
    url: 'https://{{ cp4d_url.stdout }}/zen-data/v3/service_instances/{{ _ae_instance_storage.id }}'
    method: DELETE
    headers:
      Content-Type: application/json
      Authorization: "Bearer {{ cp4d_login.token }}"
    return_content: yes
    validate_certs: no
  register: _ae_instance_storage_delete_result
  when: 
  - _delete_ae_instance | bool
  - _ae_instance_storage != {}

- name: Wait until Analytics Engine instance {{ _ae_instance_name }} has been deleted
  uri:
    url: 'https://{{ cp4d_url.stdout }}/zen-data/v3/service_instances/{{ _ae_instance_id }}'
    method: GET
    headers:
      Content-Type: application/json
      Authorization: "Bearer {{ cp4d_login.token }}"
    return_content: yes
    validate_certs: no
    status_code: 404
  register: _ae_instance_exists
  until: _ae_instance_exists.status == 404
  retries: 30
  delay: 30
  vars:
    ansible_callback_diy_runner_retry_msg: >-
      {%- set result = ansible_callback_diy.result.output -%}
      {%- set retries_left = result.retries - result.attempts -%}
      Retrying: {{ ansible_callback_diy.task.name }} ({{ retries_left }} Retries left) ...
  when: _delete_ae_instance | bool

- name: Wait until Analytics Engine storage instance {{ _ae_instance_name }} has been deleted
  uri:
    url: 'https://{{ cp4d_url.stdout }}/zen-data/v3/service_instances/{{ _ae_instance_storage.id }}'
    method: GET
    headers:
      Content-Type: application/json
      Authorization: "Bearer {{ cp4d_login.token }}"
    return_content: yes
    validate_certs: no
    status_code: 404
  register: _ae_storage_instance_exists
  until: _ae_storage_instance_exists.status == 404
  retries: 30
  delay: 30
  vars:
    ansible_callback_diy_runner_retry_msg: >-
      {%- set result = ansible_callback_diy.result.output -%}
      {%- set retries_left = result.retries - result.attempts -%}
      Retrying: {{ ansible_callback_diy.task.name }} ({{ retries_left }} Retries left) ...
  when: 
  - _delete_ae_instance | bool
  - _ae_instance_storage != {}