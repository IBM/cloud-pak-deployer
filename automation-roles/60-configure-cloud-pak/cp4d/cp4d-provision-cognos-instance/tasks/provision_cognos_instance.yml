---
- name: Show current Cognos Analytics instance
  debug:
    msg: "{{ cognos_instance }}"

- tempfile:
    path: "{{ status_dir }}"
    state: directory
  register: cp4d_automation_temp_dir

- name: Check if the Cognos Analytics instance is already running
  shell: "curl -s -k -H 'Authorization: Bearer {{ cp4d_login.token }}' -H 'Content-Type: application/json' -X GET 'https://{{ cp4d_url.stdout }}/zen-data/v3/service_instances?addon_type={{ cp4d_cognos_instance_addon_type }}&display_name={{ cognos_instance.name }}'"
  register: cognos_lookup_result

- set_fact:
    cognos_lookup_result_json: "{{ cognos_lookup_result.stdout | from_json }}"

- set_fact:
    cp4d_cognos_instance_storage_class: "{{ ocp_storage_class_file }}"
    cp4d_cognos_instance_storage_class_block: "{{ ocp_storage_class_block }}"

- name: Determine if Cognos Analytics instance already exists
  debug:
    msg: "Cognos instance {{ cognos_instance.name }} already exists in OpenShift project {{ current_cp4d_cluster.project }}, ending play provision_cognos_instance for {{ cognos_instance.name }}"
  when: "not cognos_lookup_result_json.total_count == 0"

- set_fact:
    _internal_db2_instance_id: ""

- when: "cognos_lookup_result_json.total_count == 0"
  block:
    - name: "Get provisioned db2oltp instances with name {{ cognos_instance.metastore_ref }}"
      shell: "curl -s -k -H 'Authorization: Bearer {{ cp4d_login.token }}' -H 'Content-Type: application/json' -X GET 'https://{{ cp4d_url.stdout }}/zen-data/v3/service_instances?addon_type=db2oltp&display_name={{ cognos_instance.metastore_ref }}'"
      register: db2_lookup_result

    - set_fact:
        db2_lookup_result_json: "{{ db2_lookup_result.stdout | from_json }}"

    - when: db2_lookup_result_json.total_count == 1
      block:
        - name: "Prepare Cognos instance creation using internally provisioned Db2 OLTP instance {{ cognos_instance.metastore_ref }}"
          include_tasks: prepare_provision_cognos_instance_internal.yml

        - set_fact:
            _internal_db2_instance_id: "{{ db2_lookup_result_json.service_instances[0].id }}"

    - name: "Prepare Cognos instance creation using external Db2 service {{ cognos_instance.metastore_ref }} on IBM Cloud"
      include_tasks: prepare_provision_cognos_instance_external_ibm_cloud.yml
      when: 
        - db2_lookup_result_json.total_count == 0
        - cloud_platform == 'ibm-cloud'

    - name: Get the Catalog 'Platform assets catalog'
      shell: "curl -s -k -H 'Authorization: Bearer {{ cp4d_login.token }}' -H 'Content-Type: application/json' -X GET 'https://{{ cp4d_url.stdout }}/v2/catalogs?entity.name={{ cp4d_all_assets_catalog_name }}'"
      register: cp4d_get_catalog_result

    - set_fact:
        cp4d_catalog: "{{ cp4d_get_catalog_result.stdout | from_json }}"

    - name: Validate if the connection to the Cognos Db2 Content Repository '{{ cp4d_platform_connection_name }}' is available
      shell: "curl -s -k -H 'Authorization: Bearer {{ cp4d_login.token }}' -H 'Content-Type: application/json' -X GET 'https://{{ cp4d_url.stdout }}/v2/connections?catalog_id={{ cp4d_catalog.catalogs[0].metadata.guid }}&entity.flags=personal_credentials&entity.name={{ cp4d_platform_connection_name }}'"
      register: cp4d_cognos_db2_content_repo_result

    - set_fact:
        cp4d_cognos_db2_content_repo_json: "{{ cp4d_cognos_db2_content_repo_result.stdout | from_json }}"

    - set_fact:
        cp4d_cognos_db2_content_repo: "{{ cp4d_cognos_db2_content_repo_json.resources|json_query(query_db) }}"
      vars:
        db2_name: "{{ cp4d_platform_connection_name }}"
        query_db: "[?entity.name=='{{ db2_name }}']"

    - name: Show number of data sources matching platform connection name
      debug:
        msg: "Number of datasources found with name {{ cp4d_platform_connection_name }}: {{ cp4d_cognos_db2_content_repo|length }}"

    - name: Create Cognos Repository DB connection {{ cp4d_platform_connection_name }} if it does not exist
      block:
        - name: Get the available connection types
          shell: "curl -s -k -H 'Authorization: Bearer {{ cp4d_login.token }}' -H 'Content-Type: application/json' -X GET 'https://{{ cp4d_url.stdout }}/v2/datasource_types'"
          register: cp4d_datasource_types_result

        - set_fact:
            cp4d_datasource_types: "{{ cp4d_datasource_types_result.stdout | from_json }}"

        - set_fact:
            cp4d_datasource_db2_type: "{{ cp4d_datasource_types.resources|json_query(query) }}"
          vars:
            db2_name: 'db2'
            query: "[?entity.name=='{{ db2_name }}'].metadata.asset_id"

        - name: Create Datasource connection json file
          template:
            src: cognos_connection.json.j2
            dest: "{{ cp4d_automation_temp_dir.path }}/cognos_connection.json"

        - name: Create Datasource connection {{ cp4d_platform_connection_name }}
          shell: "curl -v -k -H 'Authorization: Bearer {{ cp4d_login.token }}' -H 'Content-Type: application/json' -X POST https://{{ cp4d_url.stdout }}/v2/connections?catalog_id={{ cp4d_catalog.catalogs[0].metadata.guid }} -T {{ cp4d_automation_temp_dir.path }}/cognos_connection.json"
          register: create_cognos_connection_result
      when: "cp4d_cognos_db2_content_repo|length == 0"

    - name: Obtain Cognos Analytics version
      shell:
        oc get caservice -n {{ current_cp4d_cluster.project }} ca-addon-cr -o jsonpath='{.spec.version}'
      register: _ca_version

    - set_fact:
        _cognos_instance_pods_count: "7"
    
    - name: Create cognos instance 4.0 json file
      template:
        src: cognos_instance_40.json.j2
        dest: "{{ cp4d_automation_temp_dir.path }}/cognos_instance.json"
      when: ca_cp4d_version == "4.0"

    - when: ca_cp4d_version == "4.5"
      block:

        - name: Get current secrets
          shell: "curl -v -k -H 'Authorization: Bearer {{ cp4d_login.token }}' -H 'Content-Type: application/json' -X GET 'https://{{ cp4d_url.stdout }}/zen-data/v2/secrets'"
          register: cp4d_secret_get_result       

        - set_fact:
            cp4d_secret_result: "{{ cp4d_secret_get_result.stdout | from_json }}"          

        - set_fact:
            cp4d_secret_query: "{{ cp4d_secret_result.secrets|json_query(secret_smtp) }}"
          vars:
            secret_smtp_name: "smtpSecret"
            secret_smtp: "[?secret_name=='{{ secret_smtp_name }}']"        

        - when: cp4d_secret_query|length == 1
          set_fact:
            cp4d_cognos_smtp_secret: "{{ cp4d_secret_query[0].secret_urn }}"

        - when: cp4d_secret_query|length == 0
          block:
            - name: Create Cognos smtp secret json
              template:
                src: cognos_smtp_secret.json.j2
                dest: "{{ cp4d_automation_temp_dir.path }}/cognos_smtp_secret.json"

            - name: Create Cognos smtp secret
              shell: "curl -v -k -H 'Authorization: Bearer {{ cp4d_login.token }}' -H 'Content-Type: application/json' -X POST 'https://{{ cp4d_url.stdout }}/zen-data/v2/secrets' -T {{ cp4d_automation_temp_dir.path }}/cognos_smtp_secret.json"
              register: cp4d_cognos_smtp_secret_create_result       

            - set_fact:
                cp4d_cognos_smtp_secret_result: "{{ cp4d_cognos_smtp_secret_create_result.stdout | from_json }}"

            - set_fact:
                cp4d_cognos_smtp_secret: "{{ cp4d_cognos_smtp_secret_result.secret_urn }}"

        - debug:
            msg: "Cognos SMTP Secret: {{ cp4d_cognos_smtp_secret }}"
        
        - name: Create cognos instance 4.5 json file
          template:
            src: "cognos_instance_45_{{ cp4d_cognos_instance_tshirt_size | lower }}.json.j2"
            dest: "{{ cp4d_automation_temp_dir.path }}/cognos_instance.json"

        - set_fact:
            _cognos_instance_pods_count: "5"

    - name: Create Cognos instance
      shell: "curl -v -k -H 'Authorization: Bearer {{ cp4d_login.token }}' -H 'Content-Type: application/json' -X POST 'https://{{ cp4d_url.stdout }}/zen-data/v3/service_instances' -T {{ cp4d_automation_temp_dir.path }}/cognos_instance.json"
      register: cognos_instance_create_result

    - set_fact:
        cognos_instance_create_result_json: "{{ cognos_instance_create_result.stdout | from_json }}"

    - name: Wait until Cognos Analytics artifacts pod has started and is ready
      command: oc get po -n {{ current_cp4d_cluster.project }} -l app.kubernetes.io/component=ca-artifacts --no-headers -o=jsonpath='{.items[?(.status.containerStatuses[0].ready==true)].metadata.name}'
      register: ca_artifacts_pod
      retries: 60
      delay: 10
      until:
        - ca_artifacts_pod.rc==0
        - ca_artifacts_pod.stdout!=''

    - name: Wait for a bit so that all Cognos Analytics containers are starting
      pause:
       seconds: 90

    - name: Destroy the artifacts pod so Cognos Analytics instance provisioning continues
      shell: "oc delete pod -n {{ current_cp4d_cluster.project }} {{ ca_artifacts_pod.stdout }}"

    - name: Cognos Analytics instance being provisioned
      debug:
        msg: "Cognos Analytics instance being provisioned. ID: {{ cognos_instance_create_result_json.id }}. Provisioning can take up to 70 minutes to complete"

    - name: "Wait for Cognos Analytics to finish its provisioning, starting all {{ _cognos_instance_pods_count }} CA pods"
      shell: |
        oc get po -n {{ current_cp4d_cluster.project }} | grep ^ca{{ cognos_instance_create_result_json.id }} | grep "1/1\|2/2" | grep "Running" | wc -l
      register: ca_provision_complete
      retries: 140
      delay: 30
      until:
        - ca_provision_complete.rc==0
        - ca_provision_complete.stdout==_cognos_instance_pods_count
      vars:
        ansible_callback_diy_runner_retry_msg: >-
          {%- set result = ansible_callback_diy.result.output -%}
          {%- set retries_left = result.retries - result.attempts -%}
          Retrying: {{ ansible_callback_diy.task.name }} ({{ retries_left }} Retries left) ...

    - name: Cognos Analytics instance provisioning completed
      debug:
        msg: "Cognos Analytics instance provisioning completed. ID: {{ cognos_instance_create_result_json.id }}"

    - name: Label DB2 STS when using internal metastore
      shell: |
        oc label sts -n {{ current_cp4d_cluster.project }} c-db2oltp-{{ _internal_db2_instance_id }}-db2u cognos_instance_id={{ cognos_instance_create_result_json.id }} --overwrite
      when: not _internal_db2_instance_id == ""
