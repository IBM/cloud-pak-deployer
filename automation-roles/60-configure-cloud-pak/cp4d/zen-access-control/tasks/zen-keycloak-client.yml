---
- name: Get Keycloak information
  include_role:
    name: get-keycloak-info
  vars:
    _p_keycloak_name: "{{ _zen_access_control.keycloak_name }}"

- name: Create Keycloak client {{ _zen_access_control.keycloak_name }}
  community.general.keycloak_client:
    client_id: "{{ _zen_access_control.keycloak_name }}"
    secret: "{{ _cp4d_admin_password }}"
    description: "Keycloak OpenID Connect client {{ _zen_access_control.keycloak_name }} for project {{ current_cp4d_cluster.project }} in OpenShift cluster {{ current_cp4d_cluster.openshift_cluster_name }}"
    redirect_uris:
    - "*"
    protocol_mappers:
    - name: "Group IDs"
      protocol: openid-connect
      protocolMapper: oidc-group-membership-mapper
      config:
        claim.name: "groupIds"
        id.token.claim: true
        access.token.claim: true
        userinfo.token.claim: true
        full.group.path: false
    state: present
    auth_keycloak_url: "{{ _keycloak_auth_url }}"
    validate_certs: False
    auth_realm: master
    auth_username: "{{ _keycloak_admin_user }}"
    auth_password: "{{ _keycloak_admin_password }}"
  register: _keycloak_client

- debug:
    var: _keycloak_client

- name: Check if OpenID Connect provider {{ _zen_access_control.keycloak_name }} already exists in Foundational Services
  uri:
    url: 'https://{{ _current_idp_url }}v3/auth/idsource?name={{ _zen_access_control.keycloak_name }}'
    method: GET
    headers:
      Authorization: "Bearer {{ _iam_token }}"
      Content-Type: "application/json"
    return_content: yes
    validate_certs: no
  register: _fs_iam_oidc_client

- debug:
    var: _fs_iam_oidc_client

# Default method for OpenID Connect provider
- set_fact:
    _fs_iam_oidc_client_uid: "{{ _fs_iam_oidc_client.json.idp[0].uid }}"
  when: (_fs_iam_oidc_client.json.idp | default([])) != []

- name: Create Foundational Services OpenID Connect provider for Keycloak client {{ _zen_access_control.keycloak_name }}
  uri:
    url: 'https://{{ _current_idp_url }}v3/auth/idsource/'
    method: POST
    headers:
      Authorization: "Bearer {{ _iam_token }}"
      Content-Type: "application/json"
    body_format: json
    body:
      name: "{{ _zen_access_control.keycloak_name }}"
      description: "Keycloak authentication, client {{ _zen_access_control.keycloak_name }}"
      protocol: oidc
      type: "OIDC"
      idp_config:
        discovery_url: "{{ _keycloak_auth_url }}/realms/master/.well-known/openid-configuration"
        client_id: "{{ _zen_access_control.keycloak_name }}"
        client_secret: "{{ _cp4d_admin_password }}"
        token_attribute_mappings:
          groups: "groupIds"
          given_name: "given_name"
          family_name: "family_name"
          first_name: "given_name"
          last_name: "family_name"
          sub: "uid"
          email: "email"
    return_content: yes
    validate_certs: no
    status_code: 200
  register: _fs_iam_keycloak_client
  when: (_fs_iam_oidc_client.json.idp | default([])) == []

- name: Update Foundational Services OpenID Connect provider for Keycloak client {{ _zen_access_control.keycloak_name }}
  uri:
    url: 'https://{{ _current_idp_url }}v3/auth/idsource/{{ _fs_iam_oidc_client_uid }}'
    method: PUT
    headers:
      Authorization: "Bearer {{ _iam_token }}"
      Content-Type: "application/json"
    body_format: json
    body:
      name: "{{ _zen_access_control.keycloak_name }}"
      description: "Keycloak authentication, client {{ _zen_access_control.keycloak_name }}"
      protocol: oidc
      type: "OIDC"
      idp_config:
        discovery_url: "{{ _keycloak_auth_url }}/realms/master/.well-known/openid-configuration"
        client_id: "{{ _zen_access_control.keycloak_name }}"
        client_secret: "{{ _cp4d_admin_password }}"
        token_attribute_mappings:
          groups: "groupIds"
          given_name: "given_name"
          family_name: "family_name"
          first_name: "given_name"
          last_name: "family_name"
          sub: "uid"
          email: "email"
    return_content: yes
    validate_certs: no
    status_code: 200
  register: _fs_iam_keycloak_client
  when: (_fs_iam_oidc_client.json.idp | default([])) != []