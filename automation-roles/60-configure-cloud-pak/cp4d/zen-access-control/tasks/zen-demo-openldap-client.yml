---
- set_fact:
    _current_demo_openldap: {}

- set_fact:
    _current_demo_openldap: "{{ all_config.demo_openldap | json_query(query) | first | default({}) }}"
  vars:
    query: >-
      [?openshift_cluster_name=='{{ _zen_access_control.openshift_cluster_name }}' && name=='{{ _zen_access_control.demo_openldap_name }}']

- name: Show configured openldap {{ _zen_access_control.demo_openldap_name }}
  debug:
    var: _current_demo_openldap

- set_fact:
    _openldap_project_name: "{{ _current_demo_openldap.openldap_project | default('openldap') }}"

- name: Get OpenLDAP bind password from project  {{ _openldap_project_name }}
  shell:
    oc extract secret/openldap-password -n {{ _openldap_project_name }} --to=-
  register: _openldap_bind_password

- name: Check if OpenLDAP identity provider {{ _zen_access_control.demo_openldap_name }} already exists in Foundational Services
  uri:
    url: 'https://{{ _current_idp_url }}v3/auth/idsource?name={{ _zen_access_control.demo_openldap_name }}'
    method: GET
    headers:
      Authorization: "Bearer {{ _iam_token }}"
      Content-Type: "application/json"
    return_content: yes
    validate_certs: no
  register: _fs_iam_ldap_idp

- debug:
    var: _fs_iam_ldap_idp
  
- set_fact:
    _fs_iam_ldap_idp_uid: "{{ _fs_iam_ldap_idp.json.idp[0].uid }}"
  when: (_fs_iam_ldap_idp.json.idp | default([])) != []

- name: Validate connection to OpenLDAP {{ _zen_access_control.demo_openldap_name }}
  uri:
    url: 'https://{{ _current_idp_url }}v3/auth/idsource/ldap/validateConnection'
    method: POST
    headers:
      Authorization: "Bearer {{ _iam_token }}"
      Content-Type: "application/json"
    body_format: json
    body:
      name: "{{ _zen_access_control.demo_openldap_name }}"
      idp_config:
        ldap_url: "ldap://openldap.{{ _openldap_project_name }}.svc:389"
        ldap_basedn: "{{ _current_demo_openldap.ldap_config.base_dn }}"
        ldap_binddn: "{{ _current_demo_openldap.ldap_config.bind_admin_user }}"
        ldap_bindpassword: "{{ _openldap_bind_password.stdout | b64encode }}"
    return_content: yes
    validate_certs: no
    status_code: 200

- name: Create Foundational Services OpenLDAP identity provider {{ _zen_access_control.demo_openldap_name }}
  uri:
    url: 'https://{{ _current_idp_url }}v3/auth/idsource/'
    method: POST
    headers:
      Authorization: "Bearer {{ _iam_token }}"
      Content-Type: "application/json"
    body_format: json
    body:
      name: "{{ _zen_access_control.demo_openldap_name }}"
      description: "OpenLDAP authentication, identity provider {{ _zen_access_control.demo_openldap_name }}"
      protocol: ldap
      type: "Custom"
      idp_config:
        ldap_url: "ldap://openldap.{{ _openldap_project_name }}.svc:389"
        ldap_basedn: "{{ _current_demo_openldap.ldap_config.base_dn }}"
        ldap_binddn: "{{ _current_demo_openldap.ldap_config.bind_admin_user }}"
        ldap_bindpassword: "{{ _openldap_bind_password.stdout | b64encode }}"
        ldap_ignorecase: "false"
        ldap_userfilter: "(&(uid=%v)(objectclass={{ _current_demo_openldap.ldap_config.user_object_class }}))"
        ldap_useridmap: "*:{{ _current_demo_openldap.ldap_config.user_id_attribute }}"
        ldap_groupfilter: "(&(cn=%v)(objectclass={{ _current_demo_openldap.ldap_config.group_object_class }}))"
        ldap_groupidmap: "*:{{ _current_demo_openldap.ldap_config.group_id_attribute }}"
        ldap_groupmemberidmap: "{{ _current_demo_openldap.ldap_config.group_object_class }}:{{ _current_demo_openldap.ldap_config.group_member_attribute }}"
        ldap_nestedsearch: "false"
        ldap_pagingsearch: "false"
    return_content: yes
    validate_certs: no
    status_code: 200
  register: _fs_iam_ldap_idp_create
  when: (_fs_iam_ldap_idp.json.idp | default([])) == []

- name: Update Foundational Services OpenLDAP identity provider {{ _zen_access_control.demo_openldap_name }}
  uri:
    url: 'https://{{ _current_idp_url }}v3/auth/idsource/{{ _fs_iam_ldap_idp_uid }}'
    method: PUT
    headers:
      Authorization: "Bearer {{ _iam_token }}"
      Content-Type: "application/json"
    body_format: json
    body:
      name: "{{ _zen_access_control.demo_openldap_name }}"
      description: "OpenLDAP authentication, identity provider {{ _zen_access_control.demo_openldap_name }}"
      protocol: ldap
      type: "Custom"
      idp_config:
        ldap_url: "ldap://openldap.{{ _openldap_project_name }}.svc:389"
        ldap_basedn: "{{ _current_demo_openldap.ldap_config.base_dn }}"
        ldap_binddn: "{{ _current_demo_openldap.ldap_config.bind_admin_user }}"
        ldap_bindpassword: "{{ _openldap_bind_password.stdout | b64encode }}"
        ldap_ignorecase: "false"
        ldap_userfilter: "(&(uid=%v)(objectclass={{ _current_demo_openldap.ldap_config.user_object_class }}))"
        ldap_useridmap: "*:{{ _current_demo_openldap.ldap_config.user_id_attribute }}"
        ldap_groupfilter: "(&(cn=%v)(objectclass={{ _current_demo_openldap.ldap_config.group_object_class }}))"
        ldap_groupidmap: "*:{{ _current_demo_openldap.ldap_config.group_id_attribute }}"
        ldap_groupmemberidmap: "{{ _current_demo_openldap.ldap_config.group_object_class }}:{{ _current_demo_openldap.ldap_config.group_member_attribute }}"
        ldap_nestedsearch: "false"
        ldap_pagingsearch: "false"
    return_content: yes
    validate_certs: no
    status_code: 200
  register: _fs_iam_ldap_idp_update
  when: (_fs_iam_ldap_idp.json.idp | default([])) != []