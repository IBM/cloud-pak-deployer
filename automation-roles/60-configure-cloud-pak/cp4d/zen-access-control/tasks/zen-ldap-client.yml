---
- set_fact:
    _current_ldap: {}

- set_fact:
    _current_ldap: "{{ all_config.ldap | json_query(query) | first | default({}) }}"
  vars:
    query: >-
      [?openshift_cluster_name=='{{ _zen_access_control.openshift_cluster_name }}' && name=='{{ _zen_ldap_name }}']

- name: Show configured LDAP {{ _zen_ldap_name }}
  debug:
    var: _current_ldap

- name: Get LDAP bind password from vault secret {{ _current_ldap.bind_password_vault_secret }}
  include_role: 
    name: vault-get-secret
  vars:
    secret_name: "{{ _current_ldap.ldap_bind_password_vault_secret }}"
    secret_group: "{{ environment_name }}"
    _p_secret_variable: _ldap_bind_password

- name: Fail if bind password not set
  fail:
    msg: "LDAP bind password not set in vault secret {{ _current_ldap.bind_password_vault_secret }}"
  when: _ldap_bind_password==''

- name: Check if LDAP identity provider {{ _zen_ldap_name }} already exists in Foundational Services
  uri:
    url: 'https://{{ _current_idp_url }}v3/auth/idsource?name={{ _zen_ldap_name }}'
    method: GET
    headers:
      Authorization: "Bearer {{ _iam_token }}"
      Content-Type: "application/json"
    return_content: yes
    validate_certs: no
  register: _fs_iam_ldap_idp

- debug:
    var: _fs_iam_ldap_idp
  
- set_fact:
    _fs_iam_ldap_idp_uid: "{{ _fs_iam_ldap_idp.json.idp[0].uid }}"
  when: (_fs_iam_ldap_idp.json.idp | default([])) != []

- debug:
    var: _to_debug
  vars:
    _to_debug:
      _current_ldap: "{{ _current_ldap }}"

- name: Validate connection to LDAP {{ _zen_ldap_name }}
  uri:
    url: 'https://{{ _current_idp_url }}v3/auth/idsource/ldap/validateConnection'
    method: POST
    headers:
      Authorization: "Bearer {{ _iam_token }}"
      Content-Type: "application/json"
    body_format: json
    body:
      name: "{{ _zen_ldap_name }}"
      idp_config:
        ldap_url: "{{ _current_ldap.ldap_url }}"
        ldap_basedn: "{{ _current_ldap.ldap_base_dn }}"
        ldap_binddn: "{{ _current_ldap.ldap_bind_dn }}"
        ldap_bindpassword: "{{ _ldap_bind_password | b64encode }}"
    return_content: yes
    validate_certs: no
    status_code: 200

- name: Create Foundational Services LDAP identity provider {{ _zen_ldap_name }}
  uri:
    url: 'https://{{ _current_idp_url }}v3/auth/idsource/'
    method: POST
    headers:
      Authorization: "Bearer {{ _iam_token }}"
      Content-Type: "application/json"
    body_format: json
    body:
      name: "{{ _zen_ldap_name }}"
      description: "LDAP authentication, identity provider {{ _zen_ldap_name }}"
      protocol: ldap
      type: "Custom"
      idp_config:
        ldap_url: "{{ _current_ldap.ldap_url }}"
        ldap_basedn: "{{ _current_ldap.ldap_base_dn }}"
        ldap_binddn: "{{ _current_ldap.ldap_bind_dn }}"
        ldap_bindpassword: "{{ _ldap_bind_password | b64encode }}"
        ldap_ignorecase: "{{ _current_ldap.ldap_case_insensitive | default(False) | string | lower }}"
        ldap_userfilter: "{{ _current_ldap.ldap_user_filter }}"
        ldap_useridmap: "{{ _current_ldap.ldap_user_id_map }}"
        ldap_groupfilter: "{{ _current_ldap.ldap_group_filter }}"
        ldap_groupidmap: "{{ _current_ldap.ldap_group_id_map }}"
        ldap_groupmemberidmap: "{{ _current_ldap.ldap_group_member_id_map }}"
        ldap_nestedsearch: "false"
        ldap_pagingsearch: "false"
    return_content: yes
    validate_certs: no
    status_code: 200
  register: _fs_iam_ldap_idp_create
  when: (_fs_iam_ldap_idp.json.idp | default([])) == []

- name: Update Foundational Services LDAP identity provider {{ _zen_ldap_name }}
  uri:
    url: 'https://{{ _current_idp_url }}v3/auth/idsource/{{ _fs_iam_ldap_idp_uid }}'
    method: PUT
    headers:
      Authorization: "Bearer {{ _iam_token }}"
      Content-Type: "application/json"
    body_format: json
    body:
      name: "{{ _zen_ldap_name }}"
      description: "LDAP authentication, identity provider {{ _zen_ldap_name }}"
      protocol: ldap
      type: "Custom"
      idp_config:
        ldap_url: "{{ _current_ldap.ldap_url }}"
        ldap_basedn: "{{ _current_ldap.ldap_base_dn }}"
        ldap_binddn: "{{ _current_ldap.ldap_bind_dn }}"
        ldap_bindpassword: "{{ _ldap_bind_password | b64encode }}"
        ldap_ignorecase: "{{ _current_ldap.ldap_case_insensitive | default(False) | string | lower }}"
        ldap_userfilter: "{{ _current_ldap.ldap_user_filter }}"
        ldap_useridmap: "{{ _current_ldap.ldap_user_id_map }}"
        ldap_groupfilter: "{{ _current_ldap.ldap_group_filter }}"
        ldap_groupidmap: "{{ _current_ldap.ldap_group_id_map }}"
        ldap_groupmemberidmap: "{{ _current_ldap.ldap_group_member_id_map }}"
        ldap_nestedsearch: "false"
        ldap_pagingsearch: "false"
    return_content: yes
    validate_certs: no
    status_code: 200
  register: _fs_iam_ldap_idp_update
  when: (_fs_iam_ldap_idp.json.idp | default([])) != []