---
- set_fact:
    _create_connection: "true"
    _overwrite_connection: "{{ _cp4d_restore_connections.connections_restore_overwrite | default ('false') }}"
    _cp4d_connection_name: "{{ _cp4d_restore_connection.entity.name }}"
    _cp4d_connection_type: "{{ _cp4d_restore_connection.entity.datasource_type }}"
    _cp4d_connection_description: "{{ _cp4d_restore_connection.entity.description }}"
    _cp4d_connection_database: "{{ _cp4d_restore_connection.entity.properties.database }}"
    _cp4d_connection_hostname: "{{ _cp4d_restore_connection.entity.properties.host }}"
    _cp4d_connection_port: "{{ _cp4d_restore_connection.entity.properties.port }}"
    _cp4d_connection_port_ssl: "{{ _cp4d_restore_connection.entity.properties.ssl | default('false') }}"
    _cp4d_connection_username: "{{ _cp4d_restore_connection.entity.properties.username }}"
    _cp4d_connection_password: "{{ _cp4d_restore_connection.entity.properties.password }}"
    _cp4d_connection_inherit_access_token: "{{ _cp4d_restore_connection.entity.properties.inherit_access_token }}"
    _cp4d_connection_ssl_certificate: "{{ _cp4d_restore_connection.entity.properties.ssl_certificate | default('') }}"

- name: Validate if the connection to the'{{ _cp4d_connection_name }}' is available
  shell: "curl -s -k -H 'Authorization: Bearer {{ _cp4d_bearer_token }}' -H 'Content-Type: application/json' -X GET 'https://{{ cp4d_url.stdout }}/v2/connections?catalog_id={{ _cp4d_catalog.catalogs[0].metadata.guid }}&entity.flags=personal_credentials'"
  register: _cp4d_connection_existing_result

- set_fact:
    _cp4d_connection_existing_result_json: "{{ _cp4d_connection_existing_result.stdout | from_json }}"  

- set_fact:
    _cp4d_connection_existing_connection: "{{ _cp4d_connection_existing_result_json.resources | json_query(_query_connection) | default([]) }} "
  vars:
    _query_connection: "[? entity.name=='{{ _cp4d_connection_name }}']"    

- set_fact:
    _create_connection: "False"
  when:
    - _cp4d_connection_existing_connection|length >= 1
    - _overwrite_connection == False

- when: 
    - _cp4d_connection_existing_connection|length == 1
    - _overwrite_connection == True
  block:
      - set_fact:
          _connection_asset_id: "{{ _cp4d_connection_existing_connection[0].metadata.asset_id }}"

      - name: Delete existing {{ _cp4d_connection_name }}
        shell: "curl -v -k -H 'Authorization: Bearer {{ _cp4d_bearer_token }}' -H 'Content-Type: application/json' -X DELETE https://{{ cp4d_url.stdout }}/v2/connections/{{ _connection_asset_id }}?catalog_id={{ _cp4d_catalog.catalogs[0].metadata.guid }}"
        register: _delete_db_connection_result

- when: _create_connection == True
  block:
      - name: Create Datasource connection json file
        template:
          src: db_connection.json.j2
          dest: "{{ _cp4d_restore_connection_temp_dir.path }}/db_connection.json"
  
      - name: Create Datasource connection {{ _cp4d_connection_name }}
        shell: "curl -v -k -H 'Authorization: Bearer {{ _cp4d_bearer_token }}' -H 'Content-Type: application/json' -X POST https://{{ cp4d_url.stdout }}/v2/connections?catalog_id={{ _cp4d_catalog.catalogs[0].metadata.guid }} -T {{ _cp4d_restore_connection_temp_dir.path }}/db_connection.json"
        register: _create_db_connection_result       

      - set_fact:
          _create_db_connection_result_json: "{{ _create_db_connection_result.stdout | from_json }}"

      - name: Fail if the restore of the connection failed
        fail:
          msg: "Error restore connection source {{ _cp4d_connection_name }}: {{ _create_db_connection_result_json }}"
        when: _create_db_connection_result_json.errors is defined    

      - name: Successfully restored connection
        debug:
          msg: "Successfully restored connection {{ _cp4d_connection_name }}"
    
