---
- name: Create downloads directory
  file:
    path: "{{ status_dir }}/downloads"
    state: directory

- name: Check if Hashicorp vault was already downloaded
  stat:
    path: "{{ status_dir }}/downloads/vault_linux_amd64.zip"
  register: _vault_download

- block:
  - name: Get latest Hashicorp vault release
    shell: |
      curl --silent -qI {{ _v_vault_github_site }} | awk -F '/' '/^location/ {print  substr($NF, 2, length($NF)-1)}'
    register: _vault_latest_release

  - name: Download Hashicorp vault release {{ _vault_latest_release.stdout }} from {{ _v_vault_download_site }}
    get_url:
      url: "{{ _v_vault_download_site }}/{{ _vault_latest_release.stdout }}/vault_{{ _vault_latest_release.stdout }}_linux_amd64.zip"
      dest: "{{ status_dir }}/downloads/vault_linux_amd64.zip"
      owner: root
      mode: 0644
    register: _download_vault_result
    until: _download_vault_result is succeeded
    retries: 5
    delay: 10

  when: not _vault_download.stat.exists

- name: Check if Hashicorp vault executable was already unpacked
  stat:
    path: "{{ status_dir }}/downloads/vault"
  register: _vault_executable

- name: Unpack Hashicorp vault executable
  unarchive:
    src: "{{ status_dir }}/downloads/vault_linux_amd64.zip"
    dest: "{{ status_dir }}/downloads"
  when: not _vault_executable.stat.exists

- name: Copy Hashicorp executable to /usr/local/bin
  copy:
    src: "{{ status_dir }}/downloads/vault"
    dest: "/usr/local/bin/vault"
    mode: 0755
    remote_src: True

- name: Get Hashicorp vault version
  shell: |
    vault --version
  register: _vault_version

- name: Show Hashicorp vault version
  debug:
    var: _vault_version.stdout