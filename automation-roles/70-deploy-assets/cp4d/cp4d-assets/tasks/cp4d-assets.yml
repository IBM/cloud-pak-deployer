---
- name: Deploying assets for Cloud Pak for Data cluster {{ current_cp4d_cluster.project }}
  debug:
    msg: "Handling deploy assets for CP4D cluster {{ _current_cp4d_asset.project }}"

- set_fact:
    _current_cp4d_cluster: "{{ all_config.cp4d | json_query(query) | first | default({}) }}"
  vars:
    query: >-
      [?project=='{{ _current_cp4d_asset.project }}']

- fail:
    msg: "CP4D object {{ _current_cp4d_asset.project }} was not found for asset."
  when: _current_cp4d_cluster=={}

- set_fact:
    _current_openshift_cluster: "{{ all_config.openshift | json_query(query) | first | default({}) }}"
  vars:
    query: >-
      [?name=='{{ _current_cp4d_cluster.openshift_cluster_name }}']

- name: Download and activate OpenShift client for version {{ _current_openshift_cluster.ocp_version }}
  include_role:
    name: openshift-download-client
  vars:
    _p_ocp_version: "{{ _current_openshift_cluster.ocp_version }}"

- name: Login to the OpenShift cluster
  include_role:
    name: openshift-login
  vars: 
    _p_openshift_cluster_name: "{{ _current_cp4d_cluster.openshift_cluster_name }}"

- name: Get Route to Cloud Pak for Data
  shell: |
    oc --namespace {{ _current_cp4d_cluster.project }} get route -l component=ibm-nginx \
        -o jsonpath="{.items[0].spec.host}"
  register: _cp4d_url

- name: Check if CCS is installed in OpenShift project {{ _current_cp4d_cluster.project }}
  shell: |
    oc get ccs ccs-cr -n {{ _current_cp4d_cluster.project }}
  failed_when: False
  register: _get_ccs

- name: Install and configure cpdctl if CCS is installed in OpenShift project {{ _current_cp4d_cluster.project }}
  block:
    - name: Install cpdctl tool
      include_tasks: install-cpdctl.yml

    - name: Configure cpdctl context for cluster {{ _current_cp4d_cluster.project }}
      include_tasks: configure-cpdctl.yml

  when: _get_ccs.rc == 0

- stat:
    path: "{{ config_dir }}/{{_current_cp4d_asset.asset_location }}/cp4d-asset.sh"
  register: _cp4d_asset_shell

- name: Show cp4d-asset.sh file stats
  debug:
    var: _cp4d_asset_shell

- include_tasks: run-cp4d-asset-bash.yml
  when: _cp4d_asset_shell.stat.exists

- stat:
    path: "{{ config_dir }}/{{ _current_cp4d_asset.asset_location }}/cp4d-asset.yaml"
  register: _cp4d_asset_task

- name: Show cp4d-asset.yaml file stats
  debug:
    var: _cp4d_asset_task

- include_tasks: run-cp4d-asset-task.yml
  when: _cp4d_asset_task.stat.exists
