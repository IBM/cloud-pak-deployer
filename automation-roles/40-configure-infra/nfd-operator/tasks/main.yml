---
- include_role:
    name: run-command
  vars:
    _p_command_description: Create Node Feature Discovery operator namespace
    _p_command: "oc create ns openshift-nfd || true"

- name: Check if OpenShift NFD OperatorGroup already exists, to avoid creating another one
  shell: |
    oc get operatorgroups.operators.coreos.com -n openshift-nfd \
      --no-headers | wc -l
  register: _nfd_og

- include_role:
    name: generate-apply-yaml
  vars:
    _p_apply_yaml_description: Create NFD operator Group
    _p_apply_yaml_template: nfd-operator-group.j2
    _p_apply_yaml_output_file: "{{ status_dir }}/openshift/{{ _p_openshift_cluster.name }}-nfd-operator-group.yaml"
  when: _nfd_og.stdout == "0"

- name: Retrieve default channel for Node Feature Discovery manifest
  shell:
    oc get packagemanifest nfd -o jsonpath='{.status.defaultChannel}'
  register: _nfd_packagemanifest
  failed_when: False
  retries: 30
  delay: 10
  until: _nfd_packagemanifest.rc==0

- set_fact:
    _nfd_channel: "{{ _nfd_packagemanifest.stdout }}"

- include_role:
    name: generate-apply-yaml
  vars:
    _p_apply_yaml_description: Create NFD operator
    _p_apply_yaml_template: nfd-operator.j2
    _p_apply_yaml_output_file: "{{ status_dir }}/openshift/{{ _p_openshift_cluster.name }}-nfd-operator.yaml"

- name: Wait until NFD Operator CSV has status Succeeded
  shell: |
    oc get csv -n openshift-nfd \
      -l operators.coreos.com/nfd.openshift-nfd \
      --no-headers \
      -o custom-columns='name:metadata.name,phase:status.phase' | \
      grep -i succeeded | wc -l
  register: _nfd_csv_status
  retries: 30
  delay: 30
  until: _nfd_csv_status.stdout == "1"
  vars:
    ansible_callback_diy_runner_retry_msg: >-
      {%- set result = ansible_callback_diy.result.output -%}
      {%- set retries_left = result.retries - result.attempts -%}
      Retrying: {{ ansible_callback_diy.task.name }} ({{ retries_left }} Retries left) ...
  when: not cpd_dry_run

- name: Get OpenShift version
  include_role:
    name: openshift-get-version

- include_role:
    name: generate-apply-yaml
  vars:
    _p_apply_yaml_description: Generate NodeFeatureDiscovery CR
    _p_apply_yaml_template: nfd-cr.j2
    _p_apply_yaml_output_file: "{{ status_dir }}/openshift/{{ _p_openshift_cluster.name }}-nfd-cr.yaml"