---
- include_role:
    name: run-command
  vars:
    _p_command_description: Create OpenShift Certificate Manager namespace
    _p_command: "oc create ns cert-manager-operator || true"

- name: Retrieve default channel for Red Hat certificate manager
  shell:
    oc get packagemanifest openshift-cert-manager-operator -o jsonpath='{.status.defaultChannel}'
  register: _cert_manager_packagemanifest
  failed_when: False
  retries: 30
  delay: 10
  until: _cert_manager_packagemanifest.rc==0

- set_fact:
    _cert_manager_channel: "{{ _cert_manager_packagemanifest.stdout }}"

- include_role:
    name: generate-apply-yaml
  vars:
    _p_apply_yaml_description: Create OpenShift Certificate Manager operator
    _p_apply_yaml_template: cert-manager-operator.j2
    _p_apply_yaml_output_file: "{{ status_dir }}/openshift/{{ _p_openshift_cluster_name }}-cert-manager-operator.yaml"

- name: Wait until OpenShift Certificate Manager Operator CSV has status Succeeded
  shell: |
    oc get csv -n cert-manager-operator \
      -l operators.coreos.com/openshift-cert-manager-operator.cert-manager-operator \
      --no-headers \
      -o custom-columns='name:metadata.name,phase:status.phase' | \
      grep -i succeeded | wc -l
  register: _cert_manager_csv
  retries: 30
  delay: 30
  until: _cert_manager_csv.stdout == "1"
  vars:
    ansible_callback_diy_runner_retry_msg: >-
      {%- set result = ansible_callback_diy.result.output -%}
      {%- set retries_left = result.retries - result.attempts -%}
      Retrying: {{ ansible_callback_diy.task.name }} ({{ retries_left }} Retries left) ...
  when: not cpd_dry_run