---
- name: Get current storage class
  debug:
    var: current_openshift_storage

- name: Login to IBM Cloud
  include_role:
    name: login-ibmcloud

- name: Check if openshift-data-foundation add-on is installed
  command: |
    ibmcloud oc cluster addon get --addon openshift-data-foundation --cluster {{ current_openshift_cluster.name }} --output json
  register: ocs_check_addon
  failed_when: False

- name: Show result of ocs add-on check
  debug:
    var: ocs_check_addon

- name: Compose ibmcloud oc cluster addon command
  set_fact:
    _ibmcloud_oc_addon: "{{ lookup('template','ibmcloud-oc-addon.j2') }}"

- name: Show ibmcloud oc cluster addon command
  debug:
    var: _ibmcloud_oc_addon

- name: Enable openshift-data-foundation add-on for ROKS cluster {{ current_openshift_cluster.name }}
  shell: |
    {{ _ibmcloud_oc_addon }}
  when: ocs_check_addon.rc != 0

- name: Wait until openshift-data-foundation add-on is ready
  command: |
    ibmcloud oc cluster addon get --addon openshift-data-foundation --cluster {{ current_openshift_cluster.name }} --output json
  register: ocs_get_addon
  failed_when: False
  retries: 60
  delay: 30
  until: ((ocs_get_addon.stdout | from_json).healthState | default("")) == "normal"
  vars:
    ansible_callback_diy_runner_retry_msg: >-
      {%- set result = ansible_callback_diy.result.output -%}
      {%- set retries_left = result.retries - result.attempts -%}
      Retrying: {{ ansible_callback_diy.task.name }} ({{ retries_left }} Retries left) ...

- name: Get the nodes for the ODF storage class
  command: |
    ibmcloud oc workers --cluster {{ current_openshift_cluster.name }} \
      --worker-pool {{ current_openshift_cluster.name }}-{{ current_openshift_storage.odf_storage_label }} \
      --output json
  register: _ocs_nodes

# TODO: Remove debug
- name: Show ODF nodes
  debug:
    var: _ocs_nodes

- name: Get ODF node IPs
  set_fact:
    _ocs_node_ips: "{{ _ocs_nodes.stdout | from_json | json_query(get_ips) | list }}"
  vars:
    get_ips: "[*].networkInterfaces[0].ipAddress"

- name: Label the ODF nodes as infra
  command: |
    oc label nodes {{ item }} node-role.kubernetes.io/infra="" --overwrite
  loop: "{{ _ocs_node_ips }}"

- name: Taint the ODF nodes so they will only run ODF workload
  command: |
    oc adm taint nodes {{ item }} node.ocs.openshift.io/storage="true":NoSchedule --overwrite
  loop: "{{ _ocs_node_ips }}"

- name: Check if OcsCluster {{ current_openshift_storage.odf_storage_label }} already exists
  command: |
    oc get OcsCluster {{ current_openshift_storage.odf_storage_label }} 
  failed_when: False
  register: ocs_cluster_exists

- name: Generate OcsCluster file {{ status_dir }}/openshift/{{ current_openshift_cluster.name }}-ocscluster.yaml
  template:
    src: ocscluster.j2
    dest: "{{ status_dir }}/openshift/{{ current_openshift_cluster.name }}-ocscluster.yaml"
  when: ocs_cluster_exists.rc != 0

- name: Create OcsCluster {{ current_openshift_storage.odf_storage_label }}
  command: |
    oc apply -f {{ status_dir }}/openshift/{{ current_openshift_cluster.name }}-ocscluster.yaml
  when: ocs_cluster_exists.rc != 0

- name: Wait for OcsCluster {{ current_openshift_storage.odf_storage_label }} to be deployed
  command: |
    oc get OcsCluster {{ current_openshift_storage.odf_storage_label }} -o yaml
  register: _ocscluster_status
  failed_when: False
  retries: 60
  delay: 30
  until: ((_ocscluster_status.stdout | from_yaml).status.storageClusterStatus | default("")) == "Ready"
  vars:
    ansible_callback_diy_runner_retry_msg: >-
      {%- set result = ansible_callback_diy.result.output -%}
      {%- set retries_left = result.retries - result.attempts -%}
      Retrying: {{ ansible_callback_diy.task.name }} ({{ retries_left }} Retries left) ...

- name: Fail if OcsCluster was not created
  fail:
    msg: "OcsCluster custom resource was not created correctly, check the CR on your cluster."
  when: ((_ocscluster_status.stdout | from_yaml).status.storageClusterStatus | default("")) != "Ready"