---
- include_role:
    name: run-command
  vars:
    _p_command_description: Create NVIDIA operator namespace nvidia-gpu-operator
    _p_command: "oc create ns nvidia-gpu-operator || true"

- name: Check if NVIDIA GPU OperatorGroup already exists, to avoid creating another one
  shell: |
    oc get operatorgroups.operators.coreos.com -n nvidia-gpu-operator \
      --no-headers | wc -l
  register: _nvidia_og

- include_role:
    name: generate-apply-yaml
  vars:
    _p_apply_yaml_description: Create NVIDIA operator group
    _p_apply_yaml_template: nvidia-operator-group.j2
    _p_apply_yaml_output_file: "{{ status_dir }}/openshift/{{ _p_openshift_cluster.name }}-nvidia-operator-group.yaml"
  when: _nvidia_og.stdout == "0"

- name: Retrieve default channel for the NVIDIA GPU manifest
  shell:
    oc get packagemanifest gpu-operator-certified -o jsonpath='{.status.defaultChannel}'
  register: _nvidia_packagemanifest
  failed_when: False
  retries: 30
  delay: 10
  until: _nvidia_packagemanifest.rc==0

- set_fact:
    _nvidia_channel: "{{ _nvidia_packagemanifest.stdout }}"

- include_role:
    name: generate-apply-yaml
  vars:
    _p_apply_yaml_description: Create NVIDIA operator
    _p_apply_yaml_template: nvidia-operator.j2
    _p_apply_yaml_output_file: "{{ status_dir }}/openshift/{{ _p_openshift_cluster.name }}-nvidia-operator.yaml"

- name: Wait until NVIDIA Operator CSV has status Succeeded
  shell: |
    oc get csv -n nvidia-gpu-operator \
      -l operators.coreos.com/gpu-operator-certified.nvidia-gpu-operator \
      --no-headers \
      -o custom-columns='name:metadata.name,phase:status.phase' | \
      grep -i succeeded | wc -l
  register: _nvidia_csv_status
  retries: 30
  delay: 30
  until: _nvidia_csv_status.stdout == "1"
  vars:
    ansible_callback_diy_runner_retry_msg: >-
      {%- set result = ansible_callback_diy.result.output -%}
      {%- set retries_left = result.retries - result.attempts -%}
      Retrying: {{ ansible_callback_diy.task.name }} ({{ retries_left }} Retries left) ...
  when: not cpd_dry_run

- include_role:
    name: generate-apply-yaml
  vars:
    _p_apply_yaml_description: Generate NVIDIA ClusterPolicy CR
    _p_apply_yaml_template: nvidia-cluster-policy-cr.j2
    _p_apply_yaml_output_file: "{{ status_dir }}/openshift/{{ _p_openshift_cluster.name }}-nvidia-cluster-policy-cr.yaml"

- name: Wait until NVIDIA ClusterPolicy has status Ready
  shell: |
    oc get clusterpolicies.nvidia.com gpu-cluster-policy \
    --no-headers \
    -o custom-columns='name:metadata.name,phase:status.state' | \
    grep -i ready | wc -l
  register: _nvidia_cluster_policy_status
  retries: 30
  delay: 30
  until: _nvidia_cluster_policy_status.stdout == "1"
  vars:
    ansible_callback_diy_runner_retry_msg: >-
      {%- set result = ansible_callback_diy.result.output -%}
      {%- set retries_left = result.retries - result.attempts -%}
      Retrying: {{ ansible_callback_diy.task.name }} ({{ retries_left }} Retries left) ...
  when: not cpd_dry_run  