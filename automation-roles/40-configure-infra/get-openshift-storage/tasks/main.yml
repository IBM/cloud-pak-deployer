# Retrieve the openshift storage definitions from the specified OpenShift cluster
- set_fact:
    _openshift_storage: "{{ all_config.openshift | json_query(query) | first }}"
  vars:
    query: >-
      [?name=='{{ _p_openshift_cluster_name }}'].openshift_storage

- name: Display OpenShift storage objects
  debug:
    msg: "{{ _openshift_storage }}"

# Obtain the OpenShift storage element corresponding to the specified storage name
- set_fact:
    _selected_openshift_storage: "{{ _openshift_storage | json_query(query) | first | default({}) }}"
  vars:
    query: >-
      [?storage_name=='{{ _p_openshift_storage_name }}']
  when: _p_openshift_storage_name | default('') != ''

# Default to the first storage definition found if no storage name passed
- set_fact:
    _selected_openshift_storage: "{{ _openshift_storage | first | default({}) }}"
  when: _p_openshift_storage_name | default('') == ''

# Fail if the storage information for the passed storage name cannot be found
- name: Fail if storage information cannot be found
  fail:
    msg: "Storage information for '{{ _p_openshift_storage_name }}' in OpenShift cluster '{{ _p_openshift_cluster_name }}' not found. Please verify the configuration."
  when: _selected_openshift_storage == {}

# Display the selected storage class construct
- name: Display selected storage class
  debug:
    var: _selected_openshift_storage

# Get all storage classes available in the OpenShift cluster
- name: Retrieve available storage classes
  shell:
    oc get sc -o jsonpath='{range .items[*]}{.metadata.name}{"\n"}{end}'
  register: _openshift_storage_classes

# Display found storage classes
- name: Display found storage classes
  debug:
    var: _openshift_storage_classes

# Determine the storage type
- set_fact:
    _storage_type: "{{ _selected_openshift_storage.storage_type }}"

# Include tasks to auto-detect storage type if set to 'auto'
- include_tasks: auto-detect-storage-type.yml
  when: _storage_type == 'auto'

# Fail if the detected storage type is not supported
- fail:
    msg: "Valid storage types are 'nfs', 'ocs', 'pwx', 'aws-elastic', 'ibm-classic-storage', 'ibm-storage-fdf', and 'custom'"
  when: _storage_type not in ['nfs', 'ocs', 'pwx', 'aws-elastic', 'ibm-classic-storage', 'ibm-storage-fdf', 'custom']

# Set storage class variables based on the detected storage type
- set_fact:
    ocp_storage_class_file: "{{ _selected_openshift_storage.ocp_storage_class_file }}"
    ocp_storage_class_block: "{{ _selected_openshift_storage.ocp_storage_class_block }}"
  when: _storage_type == 'custom'

- set_fact:
    ocp_storage_class_file: "{{ _selected_openshift_storage.ocp_storage_class_file | default({
        'nfs': 'managed-nfs-storage',
        'ocs': 'ocs-storagecluster-cephfs',
        'pwx': 'px-replicated',
        'aws-elastic': 'efs-nfs-client',
        'ibm-classic-storage': 'ibmc-file-gold-gid',
        'ibm-storage-fdf': 'ibm-storage-fusion-cp-sc'
      }[_storage_type]) }}"
    ocp_storage_class_block: "{{ _selected_openshift_storage.ocp_storage_class_block | default({
        'nfs': 'managed-nfs-storage',
        'ocs': 'ocs-storagecluster-ceph-rbd',
        'pwx': 'px-db',
        'aws-elastic': 'gp2',
        'ibm-classic-storage': 'ibmc-block-gold',
        'ibm-storage-fdf': 'ibm-storage-fusion-cp-sc'
      }[_storage_type]) }}"
  when: _storage_type != 'custom'

# Display the selected storage class variables
- debug:
    msg:
      - "ocp_storage_class_file: {{ ocp_storage_class_file }}"
      - "ocp_storage_class_block: {{ ocp_storage_class_block }}"

# Check if the file and block storage classes exist in OpenShift
- name: Check if file storage class exists in OpenShift
  shell:
    oc get sc {{ ocp_storage_class_file }}
  register: file_class_status

- name: Check if block storage class exists in OpenShift
  shell:
    oc get sc {{ ocp_storage_class_block }}
  register: block_class_status
  when: ocp_storage_class_block != ocp_storage_class_file