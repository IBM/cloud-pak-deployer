---
- block:
  - name: Check if Watson Assistant has been installed {{ _p_current_cp4d_cluster.project }}
    shell: |
      oc get WatsonAssistant wa -n {{ _p_current_cp4d_cluster.project }}
    failed_when: False
    register: _wa_installed

  - name: Fail if Watson Assistant has not been installed in project {{ _p_current_cp4d_cluster.project }}
    fail:
      msg: Watson Assistant has not been installed in project {{ _p_current_cp4d_cluster.project }}
    when: _wa_installed.rc != 0
  when: not cpd_dry_run

- block:
  - name: Check if Red Hat Certificate Manager is already installed
    kubernetes.core.k8s_info:
      api_version: operators.coreos.com/v1alpha1
      kind: ClusterServiceVersion
      label_selectors:
      - operators.coreos.com/openshift-cert-manager-operator.cert-manager-operator
    register: _get_red_hat_cert_manager
  - name: Check if IBM Certificate Manager is installed
    kubernetes.core.k8s_info:
      api_version: operators.coreos.com/v1alpha1
      kind: ClusterServiceVersion
      namespace: ibm-cert-manager
      label_selectors:
      - operators.coreos.com/ibm-cert-manager-operator.ibm-cert-manager
    register: _get_ibm_cert_manager

  - debug:
      var: _get_cert_managers
    vars:
      _get_cert_managers:
        _get_ibm_cert_manager: "{{ _get_ibm_cert_manager }}"
        _get_red_hat_cert_manager: "{{ _get_red_hat_cert_manager }}"
        _rh_cert_manager_version: "{{ _get_red_hat_cert_manager.resources[0].spec.version | default('') }}"

  - fail:
      msg: >-
        If watsonx Orchestrate 5.0 or 5.1 is installed, Red Hat Certificate Manager 1.14 or the IBM Certificate Manager is mandatory. 
        Red Hat Certificate Manager {{ _get_red_hat_cert_manager.resources[0].spec.version | default('') }} was found. 
        Please delete the Red Hat Certificate Manager namespaces cert-manager and cert-manager-operator and set 
        cp4d.ibm_cert_manager to True. Then re-run deployer.
    when: 
    - _get_ibm_cert_manager.resources == []
    - not (_get_red_hat_cert_manager.resources[0].spec.version | default('')).startswith('1.14')
    - _p_cp4d_version < "5.2.0"
  when: 
  - not cpd_dry_run

- name: Generate OLM utils command to create watsonx Orchestrate subscription
  set_fact:
    _apply_olm_wxo_command: "{{ lookup('template', 'apply-olm-cartridge-wxo.j2') }}" 

- include_role:
    name: run-command
  vars:
    _p_command_description: Run apply-olm command to install watsonx Orchestrate subscriptions
    _p_command: "{{ _apply_olm_wxo_command }}"
    _p_command_log_file: "{{ status_dir }}/log/{{ _p_current_cp4d_cluster.project }}-apply-olm-wxo.log"
    _p_command_failed_when: False

- include_tasks: cp4d-prep-wxo-app-connect.yml
  when: _p_cp4d_version < "5.1.3"

- include_tasks: cp4d-setup-mcg-secrets.yml

- block:
  - set_fact:
      _cp4d_admin_password_vault_key_name: "cp4d_admin_{{ _p_current_cp4d_cluster.project| replace('-','_') }}_{{ _p_current_cp4d_cluster.openshift_cluster_name| replace('-','_') }}"

  - name: Retrieve CP4D admin password from vault secret {{ _cp4d_admin_password_vault_key_name }}
    include_role: 
      name: vault-get-secret
    vars:
      secret_name: "{{ _cp4d_admin_password_vault_key_name }}"
      secret_group: "{{ environment_name }}"
      _p_secret_variable: _cp4d_admin_password_vault

  - name: Generate command to setup watsonx Assistant instances for watsonx Orchestrate releases < 5.0.0
    set_fact:
      _setup_watsonx_assistant_instances: "{{ lookup('template', 'setup-watsonx-assistant-instances.j2') }}"

  - include_role:
      name: log-deployer-activity
    vars:
      _p_activity_description: "Setup watsonx Assistant instances for watsonx Orchestrate releases < 5.0.0"
      _p_activity_command: "{{ _setup_watsonx_assistant_instances }}"

  - name: Setup watsonx Assistant instances for watsonx Orchestrate for releases < 5.0.0
    shell: |
      setup-wxo-assistant \
        --cpd_instance_ns={{ _p_current_cp4d_cluster.project }} \
        --create_assistants=true \
        --user={{ _cp4d_user }} \
        --password={{ _cp4d_admin_password_vault }} \
        --auth_type=password
    register: _setup_wxo_assistant
    retries: 5
    delay: 10
    until: _setup_wxo_assistant.rc == 0
    when: not cpd_dry_run
  when: _p_cp4d_version < "5.0.0"

- name: Insert watsonx Orchestrate options into {{ status_dir }}/cp4d/{{ _p_current_cp4d_cluster.project }}-install-options.yml
  blockinfile:
    path: "{{ status_dir }}/cp4d/{{ _p_current_cp4d_cluster.project }}-install-options.yml"
    marker: "# {mark} watsonx_orchestrate options #"
    block: |2
        watsonx_orchestrate_watsonx_ai_type: {{ _current_cp4d_cartridge.installation_options.watsonx_orchestrate_watsonx_ai_type | default(false) }}

- block:
  - name: Starting background task to patch OpsManager and RabbitMQCluster. Logs are in {{ status_dir }}/log/{{ _p_current_cp4d_cluster.project }}-wxo-48-patch.log
    shell: |
      {{ role_path }}/files/temp-patch-wxo.sh \
        {{ status_dir }} \
        {{ _p_current_cp4d_cluster.project }}
    async: 86400
    poll: 0
    register: _patch_wxo_48

  - name: Show details of background task to patch watsonx Orchestrate
    debug:
      var: _patch_wxo_48
  when: 
  - _p_cp4d_version == "4.8.4"
  - not cpd_dry_run