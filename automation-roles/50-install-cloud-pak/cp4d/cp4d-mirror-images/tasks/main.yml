---
- name: Validate mandatory variables for mirroring images are defined
  assert:
    that:
      - _p_current_cp4d_cluster is defined
      - _p_target_registry_hostname is defined
      - _p_case_dir is defined

- name: Get OpenShift cluster definition for Cloud Pak for Data cluster
  set_fact:
    _openshift_config: "{{ all_config.openshift | json_query(query) | first | default({}) }}"
  vars:
    query: >-
      [?name=='{{ _p_current_cp4d_cluster.openshift_cluster_name }}']

- name: Retrieve processor architecture for OpenShift cluster
  set_fact:
    _openshift_processor_arch: "{{ _openshift_config.infrastructure.processor_architecture | default('amd64') }}"

- name: Switch to the correct olm-utils version
  include_role:
    name: cp4d-switch-olm-utils

- include_role:
    name: cp4d-variables

- name: Authenticate to the entitled registry if mirroring from entitled registry
  shell:
    login-entitled-registry {{ ibm_cp_entitlement_key }}
  when: (_p_source_registry_hostname | default('')) == ''

- set_fact:
    _target_registry_url: "{{ lookup('template','get-target-registry-with-namespace.j2') }}"

- name: Authenticate to the target private registry if specified
  block:

  - name: Get target registry authentication details
    include_role: 
      name: vault-get-secret
    vars:
      secret_name: "{{ _p_target_registry_credentials_secret }}"
      secret_group: "{{ environment_name }}"
      _p_secret_variable: _target_registry_auth

  - name: Fail if the credentials for the target image registry have not been found in the vault
    fail:
      msg: "Secret with credentials for target image registry ({{ _p_target_registry_credentials_secret }}) have not been found in the vault."
    when: 
    - _target_registry_auth == ""

  - set_fact:
      _target_registry_user: "{{ _target_registry_auth | regex_search('^(.+):(.+)', '\\1') | first }}"
      _target_registry_password: "{{ _target_registry_auth | regex_search('^(.+):(.+)', '\\2') | first }}"

  - name: Log in to the target private registry
    shell:
      login-private-registry {{ _target_registry_url }} \
        "{{ _target_registry_user }}" \
        "{{ _target_registry_password }}"

  when: _p_target_registry_hostname != _v_portable_registry

- name: Start portable registry if specified for either source or target
  block:
  - name: Set target directory for portable registry to {{ status_dir }}/registry-storage
    ansible.builtin.replace:
      path: /opt/ansible/etc/registryv2-config.yml
      regexp: 'rootdirectory: .*'
      replace: 'rootdirectory: {{ status_dir }}/registry-storage'

  - name: Start portable registry in the background
    shell:
      /opt/ansible/bin/start-registry > {{ status_dir }}/log/portable-registry.log 2>&1
    async: 1500000
    poll: 0
    register: _portable_registry_job

  - debug:
      var: _portable_registry_job

  - name: Wait until registry is available at port 12443
    wait_for:
      host: "127.0.0.1"
      port: 12443
      timeout: 30
  when: _p_target_registry_hostname == _v_portable_registry or (_p_source_registry_hostname | default('') == _v_portable_registry)

- name: Generate script to mirror images {{ _p_current_cp4d_cluster.project }}-mirror-images.sh
  template:
    src: mirror-images.j2
    dest: "{{ status_dir}}/cp4d/{{ _p_current_cp4d_cluster.project }}-mirror-images.sh"
    mode: u+rwx
  vars:
    _p_preview_script: False

- name: Mirror images, log is in {{ status_dir }}/log/{{ _p_current_cp4d_cluster.project }}-mirror-images.log. Detailed logs can be found in {{ status_dir }}/cp4d/mirror_*.log
  shell: |
    {{ status_dir}}/cp4d/{{ _p_current_cp4d_cluster.project }}-mirror-images.sh
  failed_when: False
  register: _mirror_images

- name: Copy log files from the mirroring process
  copy:
    src: "{{ item }}"
    dest: "{{ status_dir }}/log/"
    remote_src: True
  with_fileglob:
    - "/tmp/work/mirror_*.log"

- name: Copy case files to the {{ status_dir }}/cp4d/case directory
  copy:
    src: /tmp/work/offline/
    dest: "{{ status_dir }}/cp4d/case/"
    remote_src: True

- fail:
    msg: Mirroring of images failed, check mirror*.log files in {{ status_dir }}/log for details
  when: _mirror_images.rc != 0