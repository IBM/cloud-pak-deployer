---
- name: Validate mandatory variables for mirroring images are defined
  assert:
    that:
      - _p_current_cp4d_cluster is defined
      - _p_target_registry_hostname is defined

- name: Get OpenShift cluster definition for Cloud Pak for Data cluster
  set_fact:
    _openshift_config: "{{ all_config.openshift | json_query(query) | first | default({}) }}"
  vars:
    query: >-
      [?name=='{{ _p_current_cp4d_cluster.openshift_cluster_name }}']

- name: Retrieve processor architecture for OpenShift cluster
  set_fact:
    _openshift_processor_arch: "{{ _openshift_config.infrastructure.processor_architecture | default('amd64') }}"

- include_role:
    name: cp4d-variables

- name: Create {{ status_dir }}/work directory
  file:
    path: "{{ status_dir }}/work"
    state: directory

- name: Set target directory for portable registry to {{ status_dir }}/work/registry-storage
  ansible.builtin.replace:
    path: /opt/ansible/etc/registryv2-config.yml
    regexp: 'rootdirectory: .*'
    replace: 'rootdirectory: {{ status_dir }}/work/registry-storage'

- name: Run the entrypoint, which will start the portable registry
  shell:
    /usr/local/bin/entrypoint > {{ status_dir }}/log/olm-utils-entrypoint.log 2>&1
  async: 1500000
  poll: 0

- name: Wait until portable registry is available at port 12443
  wait_for:
    host: "127.0.0.1"
    port: 12443
    timeout: 30

- name: Authenticate to the entitled registry if mirroring from entitled registry
  shell:
    login-entitled-registry {{ ibm_cp_entitlement_key }}
  when: (_p_source_registry_hostname | default('')) == ''

- set_fact:
    _target_registry_url: "{{ lookup('template','get-target-registry-with-namespace.j2') }}"

- name: Authenticate to the target private registry if specified
  block:

  - name: Get target registry authentication details
    include_role: 
      name: vault-get-secret
    vars:
      secret_name: "{{ _p_target_registry_credentials_secret }}"
      secret_group: "{{ environment_name }}"
      _p_secret_variable: _target_registry_auth

  - name: Fail if the credentials for the target image registry have not been found in the vault
    fail:
      msg: "Secret with credentials for target image registry ({{ _p_target_registry_credentials_secret }}) have not been found in the vault."
    when: 
    - _target_registry_auth == ""

  - set_fact:
      _target_registry_user: "{{ _target_registry_auth | regex_search('^(.+):(.+)', '\\1') | first }}"
      _target_registry_password: "{{ _target_registry_auth | regex_search('^(.+):(.+)', '\\2') | first }}"

  - name: Log in to the target private registry
    shell:
      login-private-registry {{ _target_registry_url }} \
        "{{ _target_registry_user }}" \
        "{{ _target_registry_password }}"

  when: _p_target_registry_hostname != _v_portable_registry

# TODO Remove temporary patching of yml file
- block:
  - name: Remove lines with default_image_groups
    ansible.builtin.lineinfile:
      path: /opt/ansible/ansible-play/config-vars/release-4.8.5.yml
      regexp: '(.*)default_image_groups:(.*)'
      state: absent

  - name: Remove lines with ibm*Runtimes
    ansible.builtin.lineinfile:
      path: /opt/ansible/ansible-play/config-vars/release-4.8.5.yml
      regexp: '(.*)- ibm(.*)Runtimes(.*)'
      state: absent
  when: _p_current_cp4d_cluster.cp4d_version == '4.8.5'

- name: Copy CASE packages from {{ status_dir }}/work/ to /tmp/work/offline (air-gapped scenario) 
  copy:
    src: "{{ status_dir }}/work/offline"
    dest: /tmp/work/
    remote_src: True
  when: 
  - _p_source_registry_hostname | default('') == _v_portable_registry
  - not cpd_dry_run

- name: Generate script to copy mirroring log files {{ _p_current_cp4d_cluster.project }}-mirror-images-copy-log-files.sh
  template:
    src: mirror-images-copy-log-files.j2
    dest: "{{ status_dir}}/cp4d/{{ _p_current_cp4d_cluster.project }}-mirror-images-copy-log-files.sh"
    mode: u+rwx
  when: 
  - _p_source_registry_hostname | default('') == _v_portable_registry
  - not cpd_dry_run

- name: Run script that copies mirror log files in background
  shell: |
    {{ status_dir}}/cp4d/{{ _p_current_cp4d_cluster.project }}-mirror-images-copy-log-files.sh
  async: 86400
  poll: 0
  when: 
  - _p_source_registry_hostname | default('') == _v_portable_registry
  - not cpd_dry_run

- name: Collect the cartridges to be mirrored
  set_fact:
    _cartridges_to_mirror_list: "{{ _cartridges_to_install_list }}"

- block:
  - name: Collect foundation models to be installed
    set_fact:
      _models_to_install: "{{ _cartridges_to_install | json_query(jsonquery) | selectattr('state','match','installed') | map(attribute='model_id') }}"
    vars:
      jsonquery: "[?olm_utils_name=='watsonx_ai'].models[]"

  - block:
    - block:
      - name: Filter the list of cartriges to exclude watsonx_ai_ifm from regular mirroring
        set_fact:
          _cartridges_to_mirror_list: "{{ _cartridges_to_install | map(attribute='olm_utils_name') | reject('equalto', 'watsonx_ai_ifm') | join(',') }}"
    
      - name: Get the watsonx_ai_ifm case version
        shell: |
          yq ".release_components_meta.watsonx_ai_ifm.case_version" /opt/ansible/ansible-play/config-vars/release-{{ _p_current_cp4d_cluster.cp4d_version }}.yml
        register: _watsonx_ai_ifm_case_version

      - name: Find watsonx_ai_ifm images csv file
        find:
          paths: "{{ status_dir }}/work/offline/{{ _p_current_cp4d_cluster.cp4d_version }}/.ibm-pak/data/cases/ibm-watsonx-ai-ifm/{{ _watsonx_ai_ifm_case_version.stdout }}"
          patterns: '*-images.csv'
        register: _watsonx_ai_ifm_images_files

      - name: Read watsonx_ai_ifm images csv file
        read_csv:
          path: "{{ (_watsonx_ai_ifm_images_files.files | first).path }}"
          skipinitialspace: True
        register: _watsonx_ai_ifm_images_json

      - name: Initialize group list
        set_fact:
          _case_groups: []

      - name: Collect case groups for models
        set_fact:
          _case_groups: "{{ _case_groups + _watsonx_ai_ifm_images_json.list | selectattr('image_name','search',item) | map(attribute='groups') | unique }}"
        loop: "{{ _models_to_install }}"

      - debug: var=_case_groups

      - name: Create case group list
        set_fact:
          _case_group_list: "{{ _case_groups | join(',') }}"
      when: not cpd_dry_run

    - name: Generate command to mirror foundation model images
      set_fact:
        _mirror_model_images: "{{ lookup('template','mirror-model-images.j2') }}"

    - include_role:
        name: log-deployer-activity
      vars:
        _p_activity_description: "Mirror foundation model images"
        _p_activity_command: "{{ _mirror_model_images }}"

    - name: Mirror model images, log is in {{ status_dir }}/log/{{ _p_current_cp4d_cluster.project }}-mirror-model-images.log; detailed logs can be found in {{ status_dir }}/log/mirror_*.log
      shell: |
        {{ _mirror_model_images }} 2>&1 | tee {{ status_dir }}/log/{{ _p_current_cp4d_cluster.project }}-mirror-model-images.log 
      failed_when: False
      register: _mirror_model_images
      when: not cpd_dry_run
    
    when: _models_to_install | length > 0

  when:
    - _p_current_cp4d_cluster.cp4d_version >= '5.0.1'
    - '"watsonx_ai" in _cartridges_to_install_list'  

- name: Generate command to mirror images
  set_fact:
    _mirror_images: "{{ lookup('template','mirror-images.j2') }}"

- include_role:
    name: log-deployer-activity
  vars:
    _p_activity_description: "Mirror images"
    _p_activity_command: "{{ _mirror_images }}"

- name: Mirror images, log is in {{ status_dir }}/log/{{ _p_current_cp4d_cluster.project }}-mirror-images.log; detailed logs can be found in {{ status_dir }}/log/mirror_*.log
  shell: |
    {{ _mirror_images}} 2>&1 | tee {{ status_dir }}/log/{{ _p_current_cp4d_cluster.project }}-mirror-images.log 
  failed_when: False
  register: _mirror_images
  when: not cpd_dry_run

- block:

  - name: Remove {{ status_dir }}/work/offline
    ansible.builtin.file:
      path: "{{ status_dir }}/work/offline"
      state: absent

  - name: Copy mirror-images assets from /tmp/work/offline to {{ status_dir }}/work/
    copy:
      src: /tmp/work/offline
      dest: "{{ status_dir }}/work/"
      remote_src: True
  
  when: _p_source_registry_hostname | default('') != _v_portable_registry

- name: Stop script that mirrors log files
  file:
    path: "/tmp/mirroring-complete.txt"
    state: touch

- name: Copy log files from the mirroring process
  copy:
    src: "{{ item }}"
    dest: "{{ status_dir }}/log/"
    remote_src: True
  with_fileglob:
    - "/tmp/work/mirror_*.log"

- fail:
    msg: Mirroring of images failed, check mirror*.log files in {{ status_dir }}/log for details
  when: (_mirror_images.rc | default(0)) != 0 or (_mirror_model_images.rc | default(0)) != 0