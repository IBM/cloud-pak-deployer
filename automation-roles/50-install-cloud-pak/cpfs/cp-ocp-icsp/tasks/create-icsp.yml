---
- include_role:
    name: generate-apply-yaml
  vars:
    _p_apply_yaml_description: Create ImageContentSourcePolicy for private registry
    _p_apply_yaml_template: cloud-pak-icsp.j2
    _p_apply_yaml_output_file: "{{ status_dir }}/openshift/cloud-pak-icsp.yaml"

# Handle insecure registry
- name: Patch OpenShift image object if insecure registry was specified
  block:
  - name: Check if insecureRegistries already in image specification
    shell: |
      oc get image.config.openshift.io/cluster -o json | jq -r '.spec.registrySources // ""'
    register: _insecure_registries
  - include_role:
      name: run-command
    vars:
      _p_command_description: Add insecureRegistries specification
      _p_command: |
        oc patch image.config.openshift.io/cluster --type=merge \
          --patch '{"spec": {"registrySources": {"insecureRegistries": [] } } }'
    when: not "insecureRegistries" in _insecure_registries.stdout

  - name: Check if {{ private_registry_url }} already in insecure registries
    shell: |
      oc get image.config.openshift.io/cluster -o json | jq -r '.spec.registrySources.insecureRegistries // ""'
    register: _private_registry_entries
  - include_role:
      name: run-command
    vars:
      _p_command_description: Add insecure registry entry
      _p_command: |
        oc patch image.config.openshift.io/cluster --type=json \
          --patch '[{"op": "add", "path": "/spec/registrySources/insecureRegistries/-", "value": "{{ private_registry_url }}" }]'
     when: not private_registry_url in _private_registry_entries.stdout

# Handle registry with CA bundle
- name: Patch OpenShift image object if trusted CA secret was specified
  block:
  - name: Get trusted CA secret from vault
    include_role: 
      name: vault-get-secret
    vars:
      secret_name: "{{ current_image_registry.registry_trusted_ca_secret }}"
      secret_group: "{{ environment_name }}"

  - set_fact:
      _registry_trusted_ca_secret: "{{ secret_value }}"

  - name: Fail if secret {{ current_image_registry.registry_trusted_ca_secret }} was not found in the vault
    fail:
      msg: Secret "{{ current_image_registry.registry_trusted_ca_secret }}" was not found in the vault
    when: _registry_trusted_ca_secret == ""

  - name: Check if additionalTrustedCA already in image specification
    shell: |
      oc get image.config.openshift.io/cluster -o json | jq -r '.spec.additionalTrustedCA.name // ""'
    register: _additional_trusted_ca_name_output
  - set_fact:
      _additional_trusted_ca_name: "{{ _additional_trusted_ca_name_output.stdout }}"
  - set_fact:
      _additional_trusted_ca_name: "{{ current_image_registry.registry_trusted_ca_secret }}"
    when: _additional_trusted_ca_name == ""

  - include_role:
      name: run-command
    vars:
      _p_command_description: Create ConfigMap for additional trusted CA if non-existing
      _p_command: oc create cm -n openshift-config {{ _additional_trusted_ca_name }}
      _p_fail_on_error: False
  - include_role:
      name: run-command
    vars:
      _p_command_description: Set data for registry hostname {{ current_image_registry.registry_host_name }}
      _p_command: |
        oc set data cm/{{ _additional_trusted_ca_name }} -n openshift-config \
          "{{ private_registry_url | replace(':', '..') }}"="{{ _registry_trusted_ca_secret }}"

  - include_role:
      name: run-command
    vars:
      _p_command_description: Set additionalTrustedCA specification
      _p_command: |
        oc patch image.config.openshift.io/cluster --type=merge \
          --patch '{"spec": {"additionalTrustedCA": {"name": "{{ _additional_trusted_ca_name }}"}}}'
  when: current_image_registry.registry_trusted_ca_secret | default("") != ""