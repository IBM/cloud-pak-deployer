---
- name: Validate mandatory variables for mirroring images are defined
  assert:
    that:
      - _p_target_registry_hostname is defined
      - _p_case_dir is defined

- name: Ensure {{ status_dir }}/cloud-paks exists
  file:
    path: "{{ status_dir }}/cloud-paks"
    state: directory

- include_tasks: filter-images-processor-arch.yml
  when: (_p_processor_arch | default('')) != ''
    
# Set variables for source registry if one was specified
- block:

  - block:
    - name: Validate mandatory variables for mirroring images are defined
      assert:
        that:
          - _p_source_registry_credentials_secret is defined

    - name: Get source registry authentication details
      include_role: 
        name: vault-get-secret
      vars:
        secret_name: "{{ _p_source_registry_credentials_secret }}"
        secret_group: "{{ environment_name }}"
        _p_secret_variable: _source_registry_auth

    - name: Fail if the credentials for the source image registry have not been found in the vault
      fail:
        msg: "Secret with credentials for source image registry ({{ _p_source_registry_credentials_secret }}) have not been found in the vault."
      when: 
      - secret_value == ""

    when: _p_source_registry_hostname != _v_portable_registry

  - set_fact:
      _source_registry_hostname: "{{ _p_source_registry_hostname }}"
      _source_registry_port: "{{ _p_source_registry_port | default('') }}"
      _source_registry_namespace: "{{ _p_source_registry_namespace | default('') }}"
      _registry_hostname: "{{ _p_source_registry_hostname }}"
      _registry_port: "{{ _p_source_registry_port | default('') }}"
      _registry_namespace: "{{ _p_source_registry_namespace | default('') }}"

  - set_fact:
      _source_registry_url: "{{ lookup('template','get_private_registry.j2') }}"
      _source_registry_url_namespace: "{{ lookup('template','get_private_registry_with_namespace.j2') }}"
  when: _p_source_registry_hostname is defined

- set_fact:
    _source_registry_hostname: "{{ _v_entitled_registry }}"
    _source_registry_url: "{{ _v_entitled_registry }}"
    _source_registry_auth: "{{ _v_entitled_registry_username }}:{{ ibm_cp_entitlement_key }}"
  when: not _p_source_registry_hostname is defined

# Set variables for target registry
- block:
  - name: Get target registry authentication details
    include_role: 
      name: vault-get-secret
    vars:
      secret_name: "{{ _p_target_registry_credentials_secret }}"
      secret_group: "{{ environment_name }}"
      _p_secret_variable: _target_registry_auth

  - name: Fail if the credentials for the target image registry have not been found in the vault
    fail:
      msg: "Secret with credentials for target image registry ({{ _p_target_registry_credentials_secret }}) have not been found in the vault."
    when: 
    - secret_value == ""

  when: _p_target_registry_hostname != _v_portable_registry

- set_fact:
    _target_registry_hostname: "{{ _p_target_registry_hostname }}"
    _target_registry_port: "{{ _p_target_registry_port | default('') }}"
    _target_registry_namespace: "{{ _p_target_registry_namespace | default('') }}"
    _registry_hostname: "{{ _p_target_registry_hostname }}"
    _registry_port: "{{ _p_target_registry_port | default('') }}"
    _registry_namespace: "{{ _p_target_registry_namespace | default('') }}"

- set_fact:
    _target_registry_url: "{{ lookup('template','get_private_registry.j2') }}"
    _target_registry_url_namespace: "{{ lookup('template','get_private_registry_with_namespace.j2') }}"

- name: Generate "{{ status_dir }}/cloud-paks/auth.json"
  template:
    src: auth.json.j2
    dest: "{{ status_dir }}/cloud-paks/auth.json"

# Start registry
- name: Start portable registry if specified for either source or target
  block:
  - name: Set target directory for portable registry to {{ status_dir }}/registry-storage
    ansible.builtin.replace:
      path: /opt/ansible/etc/registryv2-config.yml
      regexp: 'rootdirectory: .*'
      replace: 'rootdirectory: {{ status_dir }}/registry-storage'

  - name: Start portable registry in the background
    shell:
      /opt/ansible/bin/start-registry > {{ status_dir }}/log/portable-registry.log 2>&1
    async: 1500000
    poll: 0
    register: _portable_registry_job

  - debug:
      var: _portable_registry_job

  - name: Wait until registry is available at port 12443
    wait_for:
      host: "127.0.0.1"
      port: 12443
      timeout: 30
  when: _p_target_registry_hostname == _v_portable_registry or (_p_source_registry_hostname | default('') == _v_portable_registry)

# Mirror images from entitled registry to private registry
- include_tasks: mirror-images-from-entitled.yml
  when: not _p_source_registry_hostname is defined

# Mirror images from portable or private registry to private registry
- include_tasks: mirror-images-from-private.yml
  when: _p_source_registry_hostname is defined