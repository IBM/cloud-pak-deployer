---
- set_fact:
    _threads_per_core: "{{ _p_license_threads_per_core | default(1) }}"
    _ibm_cert_manager: "{{ _p_ibm_cert_manager | bool | default(False) }}"

- include_role:
    name: cp4d-get-latest-version
  when: (_p_cp4d_version | default('')) == ''

- name: Delete offline directory
  file:
    path: /tmp/work/offline
    state: absent

- name: If air-gapped, copy case files from {{ status_dir }}/work/offline to /tmp/work/offline
  copy:
    src: "{{ status_dir }}/work/offline"
    dest: /tmp/work/
    remote_src: True
  when: (cpd_airgap | default(False) | bool)

- name: Check if IBM Certificate Manager is already installed
  kubernetes.core.k8s_info:
    api_version: operators.coreos.com/v1alpha1
    kind: ClusterServiceVersion
    namespace: ibm-cert-manager
    label_selectors:
    - operators.coreos.com/ibm-cert-manager-operator.ibm-cert-manager
  register: _get_ibm_cert_manager

- name: Check if Red Hat Certificate Manager is already installed
  kubernetes.core.k8s_info:
    api_version: operators.coreos.com/v1alpha1
    kind: ClusterServiceVersion
    label_selectors:
    - operators.coreos.com/openshift-cert-manager-operator.cert-manager-operator
  register: _get_red_hat_cert_manager

- name: Fail if Red Hat Certificate Manager is installed and IBM Certificate Manager is set to True
  fail:
    msg: >-
      Property ibm_cert_manager in cp4d must be set to False if the Red Hat Certificate Manager is installed. 
      Either set the property to False, or delete the cert-manager and cert-manager-operator namespaces and re-run the deployer
      to install IBM Certificate Manager.
  when:
  - (_get_red_hat_cert_manager.resources | default([])) != []
  - _ibm_cert_manager

- set_fact:
    _ibm_cert_manager: True
  when: >-
    (_get_ibm_cert_manager.resources | default([])) != [] or
    _p_cp4d_version < "5.1.0"

- name: Install Red Hat Certificate manager
  include_role:
    name: openshift-cert-manager
  when: not _ibm_cert_manager

- name: Get IBMLicensing
  kubernetes.core.k8s_info:
    api_version: operator.ibm.com/v1alpha1
    kind: ibmlicensings
    name: instance
  register: _ibm_licensing

- set_fact:
    _ibm_licensing_version: "{{ _ibm_licensing.resources[0].spec.version | default('') }}"
    _ibm_licensing_state: "{{ _ibm_licensing.resources[0].status.state | default('') }}"

- set_fact:
    _components_ibm_licensing: "{{ _list_components_json.list | json_query(query) | first | default({}) }}"
  vars:
    query: >-
      [?Component_name=='ibm-licensing']

- block:
  - name: Generate apply-cluster-components command
    set_fact:
      _apply_cluster_components_command: "{{ lookup('template', 'apply-cluster-components.j2') }}" 

  - include_role:
      name: run-command
    vars:
      _p_command_description: Apply cluster components for OpenShift cluster {{ _p_openshift_cluster_name }}
      _p_command: "{{ _apply_cluster_components_command }}"
      _p_command_log_file: "{{ status_dir }}/log/{{ _p_openshift_cluster_name }}-apply-cluster-components.log"

  - name: Generate command to set threads per core
    set_fact:
      _set_threads_per_core_command: "{{ lookup('template', 'set-threads.j2') }}" 

  - include_role:
      name: run-command
    vars:
      _p_command_description: Set threads per core to {{ _threads_per_core }}
      _p_command: "{{ _set_threads_per_core_command }}"
  when:
  - _ibm_licensing_state != 'ACTIVE' or
    _ibm_licensing_version != (_components_ibm_licensing.CASE_Version | default('')) or
    not _cpd_optimize_deploy