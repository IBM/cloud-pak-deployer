---
- name: Connect to IBM Container Registry and store credentials if needed
  debug:
    msg: Connect to IBM Container Registry and store credentials if needed

- tempfile:
    state: directory
  register: _icr_temp_dir

- name: Fail if the registry namespace has not been specified
  fail:
    msg: Registry namespace for image registry {{ current_image_registry.name }} not specified
  when: (current_image_registry.registry_namespace | default("")) == ""
 
- name: Set IBM Cloud region
  shell: |
    ibmcloud target -r {{ ibm_cloud_region }}

- name: Validate if IBM Container Registry {{ current_image_registry.registry_namespace }} exists
  shell: "ibmcloud cr namespace-list | grep -w '^{{ current_image_registry.registry_namespace }} ' | wc -l"
  register: ibmcloud_cr_exists_result

- name: Create ICR namespace {{ current_image_registry.registry_namespace }} if it does not exist
  shell: "ibmcloud cr namespace-add {{ current_image_registry.registry_namespace }}"
  when: "not ibmcloud_cr_exists_result.stdout == '1'"

- name: Validate if the key for ICR {{ current_image_registry.registry_namespace }} exists in the vault
  include_role: 
    name: vault-has-secret
  vars:
    secret_name: "image-registry-{{ current_cp4d_cluster.image_registry_name }}"
    secret_group: "{{ environment_name }}"

- name: Create and store the IBM Container Registry API Key into the vault
  block:

    - name: Get all IBM Cloud service ids
      command: "ibmcloud iam service-ids --output JSON"
      register: ibm_cloud_iam_service_ids_json

    - set_fact:
        ibm_cloud_iam_service_ids: "{{ ibm_cloud_iam_service_ids_json.stdout | from_json }}"

    - name: Attempt to get service-id ICR-{{ current_image_registry.registry_namespace }}-id
      set_fact:
        ibm_cloud_icr_service_id: "{{ ibm_cloud_iam_service_ids|json_query(query_ibm_cloud_icr) }}"
      vars:
        query_ibm_cloud_icr: "[?name=='ICR-{{ current_image_registry.registry_namespace }}-id']"

    - name: Create a new ibmcloud iam service-id and retrieve details
      block:
        - name: Create ibmcloud iam service-id ICR-{{ current_image_registry.registry_namespace }}-id
          command: "ibmcloud iam service-id-create ICR-{{ current_image_registry.registry_namespace }}-id --description 'Service ID for IBM Cloud Container Registry {{ current_image_registry.registry_namespace }}'"
          register: create_service_id_result

        - name: Get all IBM Cloud service ids
          command: "ibmcloud iam service-ids --output JSON"
          register: ibm_cloud_iam_service_ids_json

        - set_fact:
            ibm_cloud_iam_service_ids: "{{ ibm_cloud_iam_service_ids_json.stdout | from_json }}"

        - name: Get service-id ICR-{{ current_image_registry.registry_namespace }}-id
          set_fact:
            ibm_cloud_icr_service_id: "{{ ibm_cloud_iam_service_ids|json_query(query_ibm_cloud_icr) }}"
          vars:
            query_ibm_cloud_icr: "[?name=='ICR-{{ current_image_registry.registry_namespace }}-id']"
          failed_when: "ibm_cloud_icr_service_id|length == 0"

      when: "ibm_cloud_icr_service_id|length == 0"

    - name: Get service-policy for service-id ICR-{{ current_image_registry.registry_namespace }}-id
      command: "ibmcloud iam service-policies {{ ibm_cloud_icr_service_id[0].id }} --output json"
      register: ibm_cloud_iam_service_policies_json

    - set_fact:
        ibm_cloud_iam_service_policies: "{{ ibm_cloud_iam_service_policies_json.stdout | from_json }}"

    - name: Create ibmcloud iam service-policy for service-id ICR-{{ current_image_registry.registry_namespace }}-id
      command: "ibmcloud iam service-policy-create ICR-{{ current_image_registry.registry_namespace }}-id --roles Manager --service-name container-registry  --resource-type namespace --resource {{ current_image_registry.registry_namespace }} --region {{ ibm_cloud_region }}"
      register: create_service_policy_result
      when: "ibm_cloud_iam_service_policies|length == 0"

    - name: Get existing service api key ICR-{{ current_image_registry.registry_namespace }}-key for service-id ICR-{{ current_image_registry.registry_namespace }}-id
      shell: "ibmcloud iam service-api-keys {{ ibm_cloud_icr_service_id[0].id }} | grep -i 'ICR-{{ current_image_registry.registry_namespace }}-key' | wc -l"
      register: ibmcloud_iam_service_api_keys_result

    - name: Delete the service_api_key ICR-{{ current_image_registry.registry_namespace }}-key  if it exists
      command: "ibmcloud iam service-api-key-delete ICR-{{ current_image_registry.registry_namespace }}-key {{ ibm_cloud_icr_service_id[0].id }} -f"
      when: "ibmcloud_iam_service_api_keys_result.stdout == '1'"

    - name: Create IAM service-api-key ICR-{{ current_image_registry.registry_namespace }}-key for IBM Container Registry namespace {{ current_image_registry.registry_namespace }}
      command: "ibmcloud iam service-api-key-create ICR-{{ current_image_registry.registry_namespace }}-key ICR-{{ current_image_registry.registry_namespace }}-id --file {{ _icr_temp_dir.path }}/ICR-{{ current_image_registry.registry_namespace }}-key.txt --description 'API key for service ID ICR-{{ current_image_registry.registry_namespace }}-id'"
      register: create_service_api_key_result

    - name: Read the generated file {{ _icr_temp_dir.path }}/ICR-{{ current_image_registry.registry_namespace }}-key.txt
      include_vars:
        file: "{{ _icr_temp_dir.path }}/ICR-{{ current_image_registry.registry_namespace }}-key.txt"
        name: ibmcloud_cr_key

    - name: Store the ICR key into the vault
      include_role:
        name: vault-set-secret
      vars:
        secret_name: "image-registry-{{ current_cp4d_cluster.image_registry_name }}"
        secret_description: "IBM Container Registry API key for namespace {{ current_image_registry.registry_namespace }}"
        secret_payload: "iamapikey:{{ ibmcloud_cr_key.apikey }}"
        secret_group: "{{ environment_name }}"

    - name: Delete the generated ICR API key file
      file:
        state: absent
        path: "{{ _icr_temp_dir.path }}/ICR-{{ current_image_registry.registry_namespace }}-key.txt"

  when: "has_secret == false"
