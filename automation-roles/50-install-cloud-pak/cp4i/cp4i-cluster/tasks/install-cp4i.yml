---

# ------------ SETTING PROCESSING ENVIRONMENT -----------------------

- name: "Use CASE files by default"
  set_fact:
    _use_case_files: True

- name: "Ignore False value for use_case_files when private registry is used"
  block:
  - name: Check the configuration for the use of CASE files
    set_fact:
     _use_case_files: False
    when: (not current_cp4i_cluster.use_case_files | default(True) | bool)
  when: not (_use_entitled_registry | bool)


- name: "Check whether operators should be installed in all or specific namespace"
  set_fact:
    _operators_in_all_namespaces: "{{ current_cp4i_cluster.operators_in_all_namespaces | default(False) }}"

- debug:
    msg: "Using CASE files: {{ _use_case_files }}"

- debug:
    msg: "Operators visible in all namespaces: {{ _operators_in_all_namespaces }}"

- name: "Get OpenShift storage classes to use for {{ current_cp4i_cluster.project }} and storage class name {{ current_cp4i_cluster.openshift_storage_name }}"
  include_role: 
    name: get-openshift-storage
  vars:
    _p_openshift_cluster_name: "{{ current_cp4i_cluster.openshift_cluster_name }}"
    _p_openshift_storage_name: "{{ current_cp4i_cluster.openshift_storage_name }}"
  # returns:
    # ocp_storage_class_file
    # ocp_storage_class_block

- set_fact:
    _new_style: False

- name: "Check if new installation style is needed based on specified Cloud Pak for Integration version {{ current_cp4i_cluster.cp4i_version }}"
  set_fact:
    _new_style: True
  when: current_cp4i_cluster.cp4i_version >= '2023.4'

- debug:
    var: _new_style

- name: "Define the namespace for foundational services objects"
  set_fact:
    _foundational_services_namespace: "{{ current_cp4i_cluster.foundational_services_namespace | default('ibm-common-services') }}"

- debug:
    var: _foundational_services_namespace


# ------------ DOWLOADING CASE FILES, MIRRORING IMAGES --------------

- name: Download CASE files
  block:
  - name: Loop through instances and download CASE files for defined types
    include_tasks: download-case-file.yml
    loop: "{{ current_cp4i_cluster.instances | default([]) }}"
    loop_control:
      loop_var: current_cp4i_instance
  when: _use_case_files and (_use_entitled_registry | bool)

- name: "Download Foundational Services CASE file"
  include_tasks: download-foundational-svc-case.yml
  when:
  - _new_style
  - _use_case_files
  - _use_entitled_registry
  # returns
  # - _fs_case_file_name
  # - _fs_catalog_source_yaml
  # - _fs_case_version
  # - _fs_channel

# ------------ CREATING CATALOG SOURCES -----------------------------

- name: Create catalog sources for entitled registry when not using CASE files
  include_tasks: create-catalog-sources-entitled.yml
  when: not _use_case_files

- name: "Create catalog sources when using CASE files"
  block:

    - name: "Create instances catalog sources when using CASE files"
      include_tasks: create-catalog-source-case-file.yml
      loop: "{{ current_cp4i_cluster.instances | default([]) }}"
      loop_control:
        loop_var: current_cp4i_instance

    - name: "Create Foundational Services catalog source"
      include_tasks: create-foundational-svc-catalog.yml
      vars:
        _p_case_file_name: "{{ _fs_case_file_name }}"
        _p_catalog_source_yaml: "{{ _fs_catalog_source_yaml }}"
        _p_case_version: "{{ _fs_case_version }}"
      when:
      - _new_style
      - _use_case_files
      - _use_entitled_registry

  when: _use_case_files

# ------------ OPENSHIFT PROJECT ------------------------------------

- name: "Prepare OpenShift project {{ current_cp4i_cluster.project }} for Cloud Pak for Integration"
  include_tasks: openshift-prepare-project.yml

- name: Create entitlement key secret when entitled registry is used
  block:
    - name: Create entitlement key secret
      include_tasks: create-entitlement-key-secret.yml
  when: (_use_entitled_registry | bool)

# ------------ INSTALLING OPERATORS ---------------------------------

- name: Prepare operator group if installing in specific namespace
  include_tasks: prepare-operator-group.yml
  when: not _operators_in_all_namespaces

- name: "Operators for the new installation style"
  block:

    - name: Activate license service and certificate manager on OpenShift cluster {{ current_cp4i_cluster.openshift_cluster_name }}
      include_role:
        name: cp-fs-cluster-components
      vars:
        _p_openshift_cluster_name: "{{ current_cp4i_cluster.openshift_cluster_name }}"
        _p_migrate_topology: False
        _p_preview: False

    - name: "Installing foundational service operator"
      include_tasks: install-foundational-service-operator.yml

  when: _new_style
  
- name: Install operators for each needed instance type
  include_tasks: install-instance-operator.yml
  loop: "{{ current_cp4i_cluster.instances | default([]) }}"
  loop_control:
    loop_var: current_cp4i_instance

# ------------ INTEGRATION INSTANCES --------------------------------

- name: "Setup prerequisites for Foundational Services instance"
  include_tasks: setup-foundational-svc-prereq.yml
  when: _new_style

- name: Create instances of CP4I capabilities and runtimes
  include_tasks: create-instance.yml
  loop: "{{ current_cp4i_cluster.instances | default([]) }}"
  loop_control:
    loop_var: current_cp4i_instance

# ------------ FINALIZING -------------------------------------------

- name: "Output Cloud pak for Integration URL and admin password"
  include_role:
    name: cp4i-cluster-show
  vars:
    _p_new_style: "{{ _new_style }}"
    _p_fs_namespace: "{{ 'ibm-common-services' if _operators_in_all_namespaces else current_cp4i_cluster.project }}"

- name: "Ensure the status log folder exists"
  file:
    path: "{{status_dir}}/log"
    state: directory




