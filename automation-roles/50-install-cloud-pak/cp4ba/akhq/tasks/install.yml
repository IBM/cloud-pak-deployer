# Based on https://github.com/tchiotludo/akhq

- name: Create AKHQ directory for generated files
  ansible.builtin.file:
    path: "{{ akhq_output_directory }}"
    state: directory
    mode: u+rwx

- name: Create Project
  ansible.builtin.include_role:
    name: common
    tasks_from: create-project
  vars:
    common_namespace_name: "{{ akhq_project_name }}"
    common_output_directory: "{{ akhq_output_directory }}"

- name: Create a pod with OpenJDK runtime image
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: Pod
      metadata:
        name: akhq-keytool
        namespace: "{{ akhq_project_name }}"
      spec:
        containers:
          - name: openjdk-container
            image: ubi9/openjdk-17-runtime:1.21-1
            command: ["/bin/sh", "-c", "sleep 3600"]
    wait: true

- name: Fetch certificate, create JKS, and encode as Base64
  kubernetes.core.k8s_exec:
    namespace: "{{ akhq_project_name }}"
    pod: akhq-keytool
    container: openjdk-container
    command: |
      /bin/bash -c '
      keytool -printcert -rfc -sslserver iaf-system-kafka-bootstrap-{{ akhq_cp4ba_project_name }}.{{ apps_endpoint_domain }}:443 > /tmp/cert.pem
      keytool -importcert \
        -file /tmp/cert.pem \
        -alias iaf-ca \
        -keystore /tmp/truststore.jks \
        -storepass {{ akhq_universal_password }} \
        -noprompt \
        -trustcacerts
      base64 -w 0 /tmp/truststore.jks
      '
  register: base64_result

- name: Decode data and store as fact
  ansible.builtin.set_fact:
    _jks: "{{ base64_result.stdout }}"

- name: Cleanup pod after execution
  kubernetes.core.k8s:
    state: absent
    kind: Pod
    name: akhq-keytool
    namespace: "{{ akhq_project_name }}"

- name: Get OCP Apps Endpoint
  ansible.builtin.include_role:
    name: common
    tasks_from: apps-endpoint
  vars:
    common_output_to_var: "apps_endpoint_domain"
  when: apps_endpoint_domain is not defined

- name: Prepare yaml file for {{ item }}
  ansible.builtin.template:
    src: "{{ item }}.yaml.j2"
    dest: "{{ akhq_output_directory }}/{{ item }}.yaml"
    mode: u+rwx
  with_items:
    - configmaps
    - secrets
    - deployments
    - services

- name: Add {{ item.name }}
  kubernetes.core.k8s:
    state: present
    src: "{{ akhq_output_directory }}/{{ item.name }}.yaml"
    wait: true
    wait_sleep: "{{ item.wait_sleep }}"
    wait_timeout: "{{ item.wait_timeout }}"
  with_items:
    - {name: configmaps, wait_sleep: 15, wait_timeout: 15}
    - {name: secrets, wait_sleep: 15, wait_timeout: 15}
    - {name: deployments, wait_sleep: 15, wait_timeout: 600}
    - {name: services, wait_sleep: 15, wait_timeout: 15}

- name: Crete Edge Route
  ansible.builtin.include_role:
    name: common
    tasks_from: create-edge-route
  vars:
    common_namespace_name: "{{ akhq_project_name }}"
    common_route_name: "akhq-{{ akhq_project_name }}"
    common_service_name: akhq
    common_service_port: http
    common_apps_endpoint_domain: "{{ apps_endpoint_domain }}"
    common_output_directory: "{{ akhq_output_directory }}"

- name: Set usage entry
  ansible.builtin.include_role:
    name: usage
    tasks_from: set-entry
  vars:
    usage_entry_name: Extras-AKHQ
    usage_entry_value:
      "# AKHQ

      As kafka browser.

      ## Endpoints

      - UI: https://akhq-{{ akhq_project_name }}.{{ apps_endpoint_domain }}

      "
