- name: Get postgresql pod
  kubernetes.core.k8s_info:
    api_version: v1
    kind: Pod
    namespace: postgresql
    label_selectors:
      - app=postgresql
  register: postgresql_pod

- name: BASE DB
  kubernetes.core.k8s_exec:
    namespace: postgresql
    pod: "{{ postgresql_pod.resources[0].metadata.name }}"
    command: >
      bash -c "
        psql postgresql://$POSTGRES_USER:$POSTGRES_PASSWORD@localhost:5432/postgres <<-EOF
        -- create user base
        CREATE ROLE base WITH INHERIT LOGIN ENCRYPTED PASSWORD '{{ cp4ba_postgresql_universal_password }}';

        -- create database devos1
        create database base owner base template template0 encoding UTF8;
        revoke connect on database base from public;
        grant all privileges on database base to base;
      EOF"
  register: command_status

- name: TENANT1 DB
  kubernetes.core.k8s_exec:
    namespace: postgresql
    pod: "{{ postgresql_pod.resources[0].metadata.name }}"
    command: >
      bash -c "
        psql postgresql://$POSTGRES_USER:$POSTGRES_PASSWORD@localhost:5432/postgres <<-EOF
        -- create user tenant1
        CREATE ROLE tenant1 WITH INHERIT LOGIN ENCRYPTED PASSWORD '{{ cp4ba_postgresql_universal_password }}';

        -- create database tenant1
        create database tenant1 owner tenant1 template template0 encoding UTF8;
        revoke connect on database tenant1 from public;
        grant all privileges on database tenant1 to tenant1;
      EOF"
  register: command_status

- name: TENANT2 DB
  kubernetes.core.k8s_exec:
    namespace: postgresql
    pod: "{{ postgresql_pod.resources[0].metadata.name }}"
    command: >
      bash -c "
        psql postgresql://$POSTGRES_USER:$POSTGRES_PASSWORD@localhost:5432/postgres <<-EOF
        -- create user tenant2
        CREATE ROLE tenant2 WITH INHERIT LOGIN ENCRYPTED PASSWORD '{{ cp4ba_postgresql_universal_password }}';

        -- create database tenant2
        create database tenant2 owner tenant2 template template0 encoding UTF8;
        revoke connect on database tenant2 from public;
        grant all privileges on database tenant2 to tenant2;
      EOF"
  register: command_status

# Based on https://www.ibm.com/docs/en/cloud-paks/cp-biz-automation/latest?topic=scripts-creating-databases-document-processing
# DEVOS Based on
# https://www.ibm.com/docs/en/filenet-p8-platform/latest?topic=vtpiicd-creating-postgresql-database-table-spaces-content-platform-engine-object-store
- name: DEVOS1 DB prepare tablespace
  kubernetes.core.k8s_exec:
    namespace: postgresql
    pod: "{{ postgresql_pod.resources[0].metadata.name }}"
    command: mkdir /pgsqldata/devos1
  register: command_status
  failed_when: command_status.rc != 0 and command_status.stderr is not search('.*File exists*')

- name: DEVOS1 DB prepare tablespace permissions
  kubernetes.core.k8s_exec:
    namespace: postgresql
    pod: "{{ postgresql_pod.resources[0].metadata.name }}"
    command: chown postgres:postgres /pgsqldata/devos1
  register: command_status

- name: DEVOS1 DB
  kubernetes.core.k8s_exec:
    namespace: postgresql
    pod: "{{ postgresql_pod.resources[0].metadata.name }}"
    command: >
      bash -c "
        psql postgresql://$POSTGRES_USER:$POSTGRES_PASSWORD@localhost:5432/postgres <<-EOF
        -- create user devos1
        CREATE ROLE devos1 WITH INHERIT LOGIN ENCRYPTED PASSWORD '{{ cp4ba_postgresql_universal_password }}';

        -- create database devos1
        create database devos1 owner devos1 template template0 encoding UTF8;
        revoke connect on database devos1 from public;
        grant all privileges on database devos1 to devos1;
        grant connect, temp, create on database devos1 to devos1;

        -- please modify location follow your requirement
        create tablespace devos1_tbs owner devos1 location '/pgsqldata/devos1';
        grant create on tablespace devos1_tbs to devos1;
      EOF"
  register: command_status

- name: ADP copy DB init files
  kubernetes.core.k8s_cp:
    namespace: postgresql
    pod: postgresql-0
    remote_path: /tmp/_adp_tmp/PG
    local_path: "{{ cp4ba_output_directory }}/cert-kubernetes/ACA/configuration-ha/PG"
    no_preserve: true
    state: to_pod

# Based on https://www.ibm.com/docs/en/cloud-paks/cp-biz-automation/latest?topic=engine-preparing-postgresql-databases
- name: ADP make init scripts executable
  kubernetes.core.k8s_exec:
    namespace: postgresql
    pod: postgresql-0
    command: >
      bash -c "
      cd /tmp/_adp_tmp/PG;
      chmod +x InitBaseDB.sh;
      chmod +x InitTenantDB.sh;
      "
  register: command_status

- name: ADP init Base DB
  kubernetes.core.k8s_exec:
    namespace: postgresql
    pod: postgresql-0
    command: >
      bash -c '
      cd /tmp/_adp_tmp/PG;
      export db_server=localhost
      export db_port=5432
      export db_server_for_ca=localhost
      export db_port_for_ca=5432
      export db_adm_username=base
      export db_adm_pwd={{ cp4ba_postgresql_universal_password }}
      export db_adm_pwd_b64_encoded=0  # set to 1 if "db_adm_pwd" is base64 encoded
      export base_db_name=base
      export base_db_user=base
      export base_db_pwd={{ cp4ba_postgresql_universal_password }}
      export base_db_pwd_b64_encoded=0  # set to 1 if "base_db_pwd" is base64 encoded
      export base_user_already_defined=1
      export base_valid_user=1
      export base_pwdconfirmed=1
      export confirmation=y
      export ssl=No  # Changes to "Yes" if SSL should be enabled (only "Yes" or "No" values are accepted)
      ./InitBaseDB.sh;
      '
  register: command_status
  until: command_status.rc == 0
  retries: 5

- name: ADP init Tenant1 DB
  kubernetes.core.k8s_exec:
    namespace: postgresql
    pod: postgresql-0
    command: >
      bash -c '
      cd /tmp/_adp_tmp/PG;
      export db_server=localhost
      export db_port=5432
      export db_server_for_ca=localhost
      export db_port_for_ca=5432
      export db_adm_username=tenant1
      export db_adm_pwd={{ cp4ba_postgresql_universal_password }}
      export db_adm_pwd_b64_encoded=0  # set to 1 if "db_adm_pwd" is base64 encoded
      export base_db_name=base
      export base_db_user=base
      export base_db_pwd={{ cp4ba_postgresql_universal_password }}
      export base_db_pwd_b64_encoded=0  # set to 1 if "base_db_pwd" is base64 encoded
      export base_user_already_defined=1
      export base_valid_user=1
      export base_pwdconfirmed=1
      export tenant_type=0   # Allowed values: 0 for Enterprise, 1 for Trial, 2 for Internal
      export tenant_id=tenant1
      export tenant_db_name=tenant1
      export tenant_dsn_name=tenant1
      export tenant_db_user=tenant1
      export user_already_defined=1
      export tenant_pwdconfirmed=1
      export tenant_db_pwd={{ cp4ba_postgresql_universal_password }}
      export tenant_db_pwd_b64_encoded=0  # set to 1 if "tenant_db_pwd" is base64 encoded
      export tenant_ontology=default
      export confirmation=y
      export ssl=No  # Changes to "Yes" if SSL should be enabled (only "Yes" or "No" values are accepted)
      ./InitTenantDB.sh;
      '
  register: command_status
  until: command_status.rc == 0
  retries: 5

- name: ADP init Tenant2 DB
  kubernetes.core.k8s_exec:
    namespace: postgresql
    pod: postgresql-0
    command: >
      bash -c '
      export db_server=localhost
      export db_port=5432
      export db_server_for_ca=localhost
      export db_port_for_ca=5432
      export db_adm_username=tenant2
      export db_adm_pwd={{ cp4ba_postgresql_universal_password }}
      export db_adm_pwd_b64_encoded=0  # set to 1 if "db_adm_pwd" is base64 encoded
      export base_db_name=base
      export base_db_user=base
      export base_db_pwd={{ cp4ba_postgresql_universal_password }}
      export base_db_pwd_b64_encoded=0  # set to 1 if "base_db_pwd" is base64 encoded
      export base_user_already_defined=1
      export base_valid_user=1
      export base_pwdconfirmed=1
      export tenant_type=0   # Allowed values: 0 for Enterprise, 1 for Trial, 2 for Internal
      export tenant_id=tenant2
      export tenant_db_name=tenant2
      export tenant_dsn_name=tenant2
      export tenant_db_user=tenant2
      export user_already_defined=1
      export tenant_pwdconfirmed=1
      export tenant_db_pwd={{ cp4ba_postgresql_universal_password }}
      export tenant_db_pwd_b64_encoded=0  # set to 1 if "tenant_db_pwd" is base64 encoded
      export tenant_ontology=default
      export confirmation=y
      export ssl=No  # Changes to "Yes" if SSL should be enabled (only "Yes" or "No" values are accepted)
      ./InitTenantDB.sh;
      '
  register: command_status
  until: command_status.rc == 0
  retries: 5
