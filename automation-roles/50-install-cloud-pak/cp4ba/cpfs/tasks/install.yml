- name: Create CPFS directory for generated files
  ansible.builtin.file:
    path: "{{ cpfs_output_directory }}"
    state: directory
    mode: u+rwx

- name: Prepare yaml file for CatalogSource
  ansible.builtin.template:
    src: catalogsource.yaml.j2
    dest: "{{ cpfs_output_directory }}/catalogsource.yaml"
    mode: u+rwx

- name: Add CatalogSource
  kubernetes.core.k8s:
    state: present
    force: false
    merge_type: merge
    src: "{{ cpfs_output_directory }}/catalogsource.yaml"
    wait: true
    wait_sleep: 15
    wait_timeout: 15

- name: Wait for CatalogSource
  kubernetes.core.k8s_info:
    api_version: v1alpha1
    kind: CatalogSource
    name: "{{ item }}"
    namespace: openshift-marketplace
  register: catalogsource
  retries: 40
  delay: 5
  until: ('READY' in catalogsource | json_query('resources[*].status.connectionState.lastObservedState') | unique)
  with_items:
    - opencloud-operators
    - bts-operator
    - ibm-cs-flink-operator-catalog
    - ibm-cs-elastic-operator-catalog
    - ibm-cert-manager-catalog
    - ibm-licensing-catalog
    - cloud-native-postgresql-catalog

- name: Create Project for cpfs cert manager
  ansible.builtin.include_role:
    name: common
    tasks_from: create-project
  vars:
    common_namespace_name: "ibm-cert-manager"
    common_output_directory: "{{ cpfs_output_directory }}"

- name: Prepare yaml file for the cert manager Operator Group
  ansible.builtin.template:
    src: certmgr-operatorgroup.yaml.j2
    dest: "{{ cpfs_output_directory }}/certmgr-operatorgroup.yaml"
    mode: u+rwx

- name: Add the cert manager Operator Group
  kubernetes.core.k8s:
    state: present
    force: false
    merge_type: merge
    src: "{{ cpfs_output_directory }}/certmgr-operatorgroup.yaml"
    wait: true
    wait_sleep: 15
    wait_timeout: 15

- name: Prepare yaml file for the cert manager Operator Subscription
  ansible.builtin.template:
    src: certmgr-subscription.yaml.j2
    dest: "{{ cpfs_output_directory }}/certmgr-subscription.yaml"
    mode: u+rwx

- name: Add the cert manager Operator Subscription
  kubernetes.core.k8s:
    state: present
    force: false
    merge_type: merge
    src: "{{ cpfs_output_directory }}/certmgr-subscription.yaml"
    wait: true
    wait_sleep: 15
    wait_timeout: 15

- name: Wait for CertManagerConfig instance default to appear
  kubernetes.core.k8s_info:
    api_version: operator.ibm.com/v1
    kind: CertManagerConfig
    name: default
    namespace: ibm-cert-manager
  register: cert_manager
  retries: 10
  delay: 15
  until: cert_manager.resources | length == 1

- name: Set cert manager license accept
  kubernetes.core.k8s:
    state: present
    api_version: operator.ibm.com/v1
    kind: CertManagerConfig
    name: default
    namespace: ibm-cert-manager
    definition:
      spec:
        license:
          accept: true

- name: Create Project for cpfs licensing
  ansible.builtin.include_role:
    name: common
    tasks_from: create-project
  vars:
    common_namespace_name: "ibm-licensing"
    common_output_directory: "{{ cpfs_output_directory }}"

- name: Prepare yaml file for the licensing Operator Group
  ansible.builtin.template:
    src: licensing-operatorgroup.yaml.j2
    dest: "{{ cpfs_output_directory }}/licensing-operatorgroup.yaml"
    mode: u+rwx

- name: Add the licensing Operator Group
  kubernetes.core.k8s:
    state: present
    force: false
    merge_type: merge
    src: "{{ cpfs_output_directory }}/licensing-operatorgroup.yaml"
    wait: true
    wait_sleep: 15
    wait_timeout: 15

- name: Prepare yaml file for the licensing Operator Subscription
  ansible.builtin.template:
    src: licensing-subscription.yaml.j2
    dest: "{{ cpfs_output_directory }}/licensing-subscription.yaml"
    mode: u+rwx

- name: Add the licensing Operator Subscription
  kubernetes.core.k8s:
    state: present
    force: false
    merge_type: merge
    src: "{{ cpfs_output_directory }}/licensing-subscription.yaml"
    wait: true
    wait_sleep: 15
    wait_timeout: 15

- name: Wait for IBMLicensing instance to appear
  kubernetes.core.k8s_info:
    api_version: operator.ibm.com/v1alpha1
    kind: IBMLicensing
    name: instance
    namespace: ibm-licensing
  register: licensing
  retries: 10
  delay: 15
  until: licensing.resources | length == 1

- name: Set licensing license accept
  kubernetes.core.k8s:
    state: present
    api_version: operator.ibm.com/v1alpha1
    kind: IBMLicensing
    name: instance
    namespace: ibm-licensing
    definition:
      spec:
        license:
          accept: true

- name: Retrieve default certification
  ansible.builtin.include_role:
    name: common
    tasks_from: retrieve-default-certification
  vars:
    common_crt_output_to_var: "tls_crt"
    common_key_output_to_var: "tls_key"
    common_ca_output_to_var: "ca_crt"

- name: Prepare yaml file for Secret
  ansible.builtin.template:
    src: license-service-secret.yaml.j2
    dest: "{{ cpfs_output_directory }}/license-service-secret.yaml"
    mode: u+rwx

- name: Add Secret
  kubernetes.core.k8s:
    state: present
    force: false
    merge_type: merge
    src: "{{ cpfs_output_directory }}/license-service-secret.yaml"
    wait: true
    wait_sleep: 15
    wait_timeout: 15

# Based on https://www.ibm.com/docs/en/cpfs?topic=operator-using-custom-certificates
- name: Apply custom certificate for License Service
  kubernetes.core.k8s:
    state: present
    api_version: operator.ibm.com/v1alpha1
    kind: IBMLicensing
    name: instance
    namespace: ibm-licensing
    definition:
      spec:
        httpsCertsSource: "custom"

- name: Create Project for dedicated cpfs instance
  ansible.builtin.include_role:
    name: common
    tasks_from: create-project
  vars:
    common_namespace_name: "{{ cpfs_cp4ba_project_name }}"
    common_output_directory: "{{ cpfs_output_directory }}"

- name: Prepare yaml file for the Operator Group
  ansible.builtin.template:
    src: operatorgroup.yaml.j2
    dest: "{{ cpfs_output_directory }}/operatorgroup.yaml"
    mode: u+rwx

- name: Add the Operator Group
  kubernetes.core.k8s:
    state: present
    force: false
    merge_type: merge
    src: "{{ cpfs_output_directory }}/operatorgroup.yaml"
    wait: true
    wait_sleep: 15
    wait_timeout: 15

- name: Prepare yaml file for the Operator Subscription
  ansible.builtin.template:
    src: subscription.yaml.j2
    dest: "{{ cpfs_output_directory }}/subscription.yaml"
    mode: u+rwx

- name: Add the Operator Subscription
  kubernetes.core.k8s:
    state: present
    force: false
    merge_type: merge
    src: "{{ cpfs_output_directory }}/subscription.yaml"
    wait: true
    wait_sleep: 15
    wait_timeout: 15

- name: Wait for CommonService instance common-service to appear
  kubernetes.core.k8s_info:
    api_version: operator.ibm.com/v3
    kind: CommonService
    name: common-service
    namespace: "{{ cpfs_cp4ba_project_name }}"
  register: common_service
  retries: 10
  delay: 15
  until: common_service.resources | length == 1

- name: Wait for CommonService instance common-service Succeeded phase
  kubernetes.core.k8s_info:
    api_version: operator.ibm.com/v3
    kind: CommonService
    name: common-service
    namespace: "{{ cpfs_cp4ba_project_name }}"
  register: common_service
  retries: 25
  delay: 15
  until: ('Succeeded' in phase)
  vars:
    condition_query: "resources[*].status.phase"
    phase: "{{ common_service | json_query(condition_query) | unique }}"

- name: Set common-service profile
  kubernetes.core.k8s:
    state: present
    api_version: operator.ibm.com/v3
    kind: CommonService
    name: common-service
    namespace: "{{ cpfs_cp4ba_project_name }}"
    definition:
      spec:
        size: "{{ current_cp4ba_cluster.cpfs_profile_size }}"

- name: Set common-service license accept
  kubernetes.core.k8s:
    state: present
    api_version: operator.ibm.com/v3
    kind: CommonService
    name: common-service
    namespace: "{{ cpfs_cp4ba_project_name }}"
    definition:
      spec:
        license:
          accept: true

- name: Patch common-service to add services list
  kubernetes.core.k8s_json_patch:
    api_version: operator.ibm.com/v3
    kind: CommonService
    name: common-service
    namespace: "{{ cpfs_cp4ba_project_name }}"
    patch:
      - op: add
        path: "/spec/services"
        value: []

- name: Patch common-service mongodb storage class
  kubernetes.core.k8s_json_patch:
    api_version: operator.ibm.com/v3
    kind: CommonService
    name: common-service
    namespace: "{{ cpfs_cp4ba_project_name }}"
    patch:
      - op: add
        path: "/spec/services/-"
        value:
          name: "ibm-im-mongodb-operator"
          spec:
            mongoDB:
              storageClass: "{{ cpfs_block_storage_class_name }}"

- name: Patch common-service customize username of the default CPFS admin
  kubernetes.core.k8s_json_patch:
    api_version: operator.ibm.com/v3
    kind: CommonService
    name: common-service
    namespace: "{{ cpfs_cp4ba_project_name }}"
    patch:
      - op: add
        path: "/spec/services/-"
        value:
          name: "ibm-im-operator"
          spec:
            authentication:
              config:
                defaultAdminUser: "cpfsadmin"

- name: Wait for CommonService instance common-service Succeeded phase
  kubernetes.core.k8s_info:
    api_version: operator.ibm.com/v3
    kind: CommonService
    name: common-service
    namespace: "{{ cpfs_cp4ba_project_name }}"
  register: common_service
  retries: 25
  delay: 15
  until: ('Succeeded' in phase)
  vars:
    condition_query: "resources[*].status.phase"
    phase: "{{ common_service | json_query(condition_query) | unique }}"

- name: Set common-service license accept
  kubernetes.core.k8s:
    state: present
    api_version: operator.ibm.com/v3
    kind: CommonService
    name: common-service
    namespace: "{{ cpfs_cp4ba_project_name }}"
    definition:
      spec:
        license:
          accept: true

- name: Wait for CRDs to be Established
  ansible.builtin.include_role:
    name: common
    tasks_from: wait-crd
  vars:
    common_crd_name: "{{ item }}"
  with_items:
    - operandconfigs.operator.ibm.com
    - operandrequests.operator.ibm.com

- name: Create ICR Secret
  ansible.builtin.include_role:
    name: common
    tasks_from: create-icr-secret
  vars:
    common_output_directory: "{{ cpfs_output_directory }}"
    common_icr_secret_name: ibm-entitlement-key
    common_icr_password: "{{ cpfs_icr_password }}"
    common_namespace_name: "{{ cpfs_cp4ba_project_name }}"

- name: Prepare yaml file for the OperandRequest instance
  ansible.builtin.template:
    src: operandrequest.yaml.j2
    dest: "{{ cpfs_output_directory }}/operandrequest.yaml"
    mode: u+rwx

- name: Apply OperandRequest instance
  kubernetes.core.k8s:
    state: present
    force: false
    merge_type: merge
    src: "{{ cpfs_output_directory }}/operandrequest.yaml"
    wait: true
    wait_sleep: 15
    wait_timeout: 15

- name: Wait for OperandRequest instance Running phase
  kubernetes.core.k8s_info:
    api_version: operator.ibm.com/v1alpha1
    kind: OperandRequest
    name: common-service
    namespace: "{{ cpfs_cp4ba_project_name }}"
  register: operand_request
  retries: 80
  delay: 15
  until: ('Running' in operand_request | json_query(condition_query) | unique)
  vars:
    condition_query: "resources[*].status.phase"

- name: Wait for Authentication Ready state 
  kubernetes.core.k8s_info:
    api_version: operator.ibm.com/v1alpha1
    kind: Authentication
    name: example-authentication
    namespace: "{{ cpfs_cp4ba_project_name }}"
  register: authentication
  retries: 80
  delay: 15
  until: ('Ready' in authentication | json_query(condition_query) | unique)
  vars:
    condition_query: "resources[*].status.service.status"

# TODO Based on https://www.ibm.com/docs/en/cpfs?topic=i3o-installing-cloud-pak-foundational-services-in-multiple-namespaces
# currently not supported in multi instance deployment 2023-06-27

# - name: Prepare yaml file for the License Service Reporter
#   ansible.builtin.template:
#     src: ibmlicenseservicereporter.yaml.j2
#     dest: "{{ cpfs_output_directory }}/ibmlicenseservicereporter.yaml"
#     mode: u+rwx

# # Based on Based on https://www.ibm.com/docs/en/cpfs?topic=reporter-deploying-license-service

# - name: Apply License Service Reporter instance
#   kubernetes.core.k8s:
#     state: present
#     force: false
#     merge_type: merge
#     src: "{{ cpfs_output_directory }}/ibmlicenseservicereporter.yaml"
#     wait: true
#     wait_sleep: 15
#     wait_timeout: 15

# - name: Patch common-service enable License Service Reporter
#   kubernetes.core.k8s_json_patch:
#     api_version: operator.ibm.com/v3
#     kind: CommonService
#     name: common-service
#     namespace: "{{ cpfs_cp4ba_project_name }}"
#     patch:
#       - op: add
#         path: "/spec/services/-"
#         value:
#           name: "ibm-licensing-operator"
#           spec:
#             IBMLicenseServiceReporter: {}

# - name: Wait for license reporter Deployment to be Available
#   ansible.builtin.include_role:
#     name: common
#     tasks_from: wait-resource-condition
#   vars:
#     common_api_version: v1
#     common_resource_kind: Deployment
#     common_resource_name: ibm-license-service-reporter-instance
#     common_resource_namespace: cs-control
#     common_condition_name: Available
#     common_retries: 80
#     common_delay: 15
# TODO END

# Switch Ingress certificate mode & delete artifacts"
# Based on https://www.ibm.com/docs/en/cpfs?topic=operator-replacing-foundational-services-endpoint-certificates

- name: Get cpfsadmin user password in secret
  kubernetes.core.k8s_info:
    api_version: v1
    kind: Secret
    name: platform-auth-idp-credentials
    namespace: "{{ cpfs_cp4ba_project_name }}"
  register: cpfs_admin_secret
  retries: 40
  delay: 30

- name: Update cpfs admin password
  block:

    # Based on https://www.ibm.com/docs/en/cpfs?topic=configurations-changing-cluster-administrator-access-credentials#pwd
    # cloudctl command replaced with actual Secret and Pod restarts because per
    # https://www.ibm.com/docs/en/cloud-paks/cp-integration/2020.3?topic=SSGT7J_20.3/cloudctl/3.x.x/cli_pm_commands.html#update-secret
    # it does "Update a secret and restart deployments that use the secret."
    - name: Change cpfsadmin user password in secret
      kubernetes.core.k8s:
        state: present
        api_version: v1
        kind: Secret
        name: platform-auth-idp-credentials
        namespace: "{{ cpfs_cp4ba_project_name }}"
        definition:
          data:
            admin_password: "{{ cpfs_universal_password | b64encode }}"

    - name: Delete pod which use cpfsadmin secret
      kubernetes.core.k8s:
        state: absent
        api_version: v1
        kind: Pod
        namespace: "{{ cpfs_cp4ba_project_name }}"
        label_selectors:
          - app=platform-auth-service

    - name: Wait for Deployments which use cpfsadmin secret to be Available
      ansible.builtin.include_role:
        name: common
        tasks_from: wait-resource-condition
      vars:
        common_api_version: v1
        common_resource_kind: Deployment
        common_resource_name: platform-auth-service
        common_resource_namespace: "{{ cpfs_cp4ba_project_name }}"
        common_condition_name: Available
        common_retries: 80
        common_delay: 15

    - name: Delete commonui to refresh references
      kubernetes.core.k8s:
        state: absent
        api_version: v1
        kind: Pod
        namespace: "{{ cpfs_cp4ba_project_name }}"
        label_selectors:
          - k8s-app=common-web-ui

    - name: Wait for Deployments which use cpfsadmin secret to be Available
      ansible.builtin.include_role:
        name: common
        tasks_from: wait-resource-condition
      vars:
        common_api_version: v1
        common_resource_kind: Deployment
        common_resource_name: common-web-ui
        common_resource_namespace: "{{ cpfs_cp4ba_project_name }}"
        common_condition_name: Available
        common_retries: 80
        common_delay: 15

  when: cpfs_admin_secret | json_query(condition_query) | b64decode != cpfs_universal_password
  vars:
    condition_query: 'resources[0].data.admin_password'

- name: Get OCP Apps domain
  ansible.builtin.include_role:
    name: common
    tasks_from: apps-endpoint
  vars:
    common_output_to_var: "apps_endpoint_domain"

- name: Get IAM token
  ansible.builtin.include_role:
    name: common
    tasks_from: iam-token-user
  vars:
    common_cpfs_project: "{{ cp4ba_project_name }}"
    common_user: "cpfsadmin"
    common_password: "{{ cpfs_universal_password }}"
    common_output_to_var: "iam_token"

- name: Prepare JSON file for LDAP connection
  ansible.builtin.template:
    src: ldap-connection.json.j2
    dest: "{{ cpfs_output_directory }}/ldap-connection.json"
    mode: u+rwx

- name: Add LDAP connection
  ansible.builtin.uri:
    url: "https://cp-console-{{ cpfs_cp4ba_project_name }}.{{ apps_endpoint_domain }}/idprovider/v3/auth/idsource/"
    method: POST
    headers:
      Authorization: Bearer {{ iam_token }}
    body_format: json
    src: "{{ cpfs_output_directory }}/ldap-connection.json"
    status_code: [200, 422, 500]
    validate_certs: false
  register: ldap_response
  failed_when: ldap_response.status == 500 and ldap_response.json | json_query('message') is not search('.*Already exists.*')
