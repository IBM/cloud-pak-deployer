# Based on https://github.com/dbeaver/cloudbeaver
# server conf https://dbeaver.com/docs/cloudbeaver/Server-configuration/
# datasources https://dbeaver.com/docs/cloudbeaver/Configuring-server-datasources/

- name: Create cloudbeaver directory for generated files
  ansible.builtin.file:
    path: "{{ cloudbeaver_output_directory }}"
    state: directory
    mode: u+rwx

- name: Create Project
  ansible.builtin.include_role:
    name: common
    tasks_from: create-project
  vars:
    common_namespace_name: "{{ cloudbeaver_project_name }}"
    common_output_directory: "{{ cloudbeaver_output_directory }}"

- name: Prepare yaml file for {{ item }}
  ansible.builtin.template:
    src: "{{ item }}.yaml.j2"
    dest: "{{ cloudbeaver_output_directory }}/{{ item }}.yaml"
    mode: u+rwx
  with_items:
    - serviceaccounts
    - secrets
    - persistentvolumeclaims
    - rolebindings
    - deployments
    - services

- name: Add {{ item.name }}
  kubernetes.core.k8s:
    state: present
    src: "{{ cloudbeaver_output_directory }}/{{ item.name }}.yaml"
    wait: true
    wait_sleep: "{{ item.wait_sleep }}"
    wait_timeout: "{{ item.wait_timeout }}"
  with_items:
    - {name: serviceaccounts, wait_sleep: 15, wait_timeout: 15}
    - {name: secrets, wait_sleep: 15, wait_timeout: 15}
    - {name: persistentvolumeclaims, wait_sleep: 15, wait_timeout: 300}
    - {name: rolebindings, wait_sleep: 15, wait_timeout: 15}
    - {name: deployments, wait_sleep: 15, wait_timeout: 600}
    - {name: services, wait_sleep: 15, wait_timeout: 15}

- name: Get OCP Apps Endpoint
  ansible.builtin.include_role:
    name: common
    tasks_from: apps-endpoint
  vars:
    common_output_to_var: "apps_endpoint_domain"
  when: apps_endpoint_domain is not defined

- name: Crete Edge Route
  ansible.builtin.include_role:
    name: common
    tasks_from: create-edge-route
  vars:
    common_namespace_name: "{{ cloudbeaver_project_name }}"
    common_route_name: "cloudbeaver-{{ cloudbeaver_project_name }}"
    common_service_name: cloudbeaver
    common_apps_endpoint_domain: "{{ apps_endpoint_domain }}"
    common_output_directory: "{{ cloudbeaver_output_directory }}"

- name: Hash universal password MD5
  ansible.builtin.set_fact:
    cb_universal_password_md5: "{{ cloudbeaver_universal_password | md5 | upper }}"

- name: Get OCP Apps domain
  ansible.builtin.include_role:
    name: common
    tasks_from: apps-endpoint
  vars:
    common_output_to_var: "apps_endpoint_domain"

- name: Login to cloudbeaver
  ansible.builtin.uri:
    url: https://cloudbeaver-{{ cloudbeaver_project_name }}.{{ apps_endpoint_domain }}/api/gql
    validate_certs: false
    method: POST
    headers:
      content-type: "application/json"
    body_format: json
    body:
      query: 'query {
          authLogin(credentials: {user: "{{ lc_principal_admin_user }}", password: "{{ cb_universal_password_md5 }}"}, provider: "local") {
            authStatus
          }
        }'
  register: cloudbeaver_login_response
  failed_when: cloudbeaver_login_response.status != 200 or cloudbeaver_login_response.json.errors is defined

- name: Get session id
  ansible.builtin.set_fact:
    cb_session_id: "{{ cloudbeaver_login_response.cookies['cb-session-id'] }}"

- name: Delete PostgreSQL Template
  ansible.builtin.uri:
    url: https://cloudbeaver-{{ cloudbeaver_project_name }}.{{ apps_endpoint_domain }}/api/gql
    validate_certs: false
    method: POST
    headers:
      content-type: "application/json"
      Cookie: "cb-session-id={{ cb_session_id }}"
    body_format: json
    body:
      query: 'mutation {
          deleteConnection(projectId: "g_GlobalConfiguration" id: "postgresql-template-1")
        }'
  register: cloudbeaver_delete_response
  failed_when: cloudbeaver_delete_response.status != 200 or
    (cloudbeaver_delete_response.json.errors is defined and
      cloudbeaver_delete_response.json.errors is not search('Connection \'postgresql-template-1\' not found'))

- name: Get existing connections
  ansible.builtin.uri:
    url: https://cloudbeaver-{{ cloudbeaver_project_name }}.{{ apps_endpoint_domain }}/api/gql
    validate_certs: false
    method: POST
    headers:
      content-type: "application/json"
      Cookie: "cb-session-id={{ cb_session_id }}"
    body_format: json
    body:
      query: 'query {
          userConnections {
            name
          }
        }'
  register: cloudbeaver_existing_response
  failed_when: cloudbeaver_existing_response.status != 200 or cloudbeaver_existing_response.json.errors is defined

- name: Add PostgreSQL to cloudbeaver
  ansible.builtin.uri:
    url: https://cloudbeaver-{{ cloudbeaver_project_name }}.{{ apps_endpoint_domain }}/api/gql
    validate_certs: false
    method: POST
    headers:
      content-type: "application/json"
      Cookie: "cb-session-id={{ cb_session_id }}"
    body_format: json
    body:
      query: 'mutation createConnection($providerProperties: Object) {
          createConnection(
            config: { credentials: {userName: "postgres", userPassword: "{{ cloudbeaver_postgresql_universal_password }}"},
            saveCredentials: true, driverId: "postgresql:postgres-jdbc", host: "{{ cloudbeaver_postgresql_hostname }}", port: "5432",
            databaseName: "postgres" name:"PostgreSQL",
            providerProperties: $providerProperties}
            projectId: "g_GlobalConfiguration"
          ) {
            id
          }
        }'
      variables: {
        "providerProperties": {
          "@dbeaver-show-non-default-db@": true
        }
      }
  register: cloudbeaver_create_response
  failed_when: cloudbeaver_create_response.status != 200 or cloudbeaver_create_response.json.errors is defined
  when: cloudbeaver_existing_response is not search('.*PostgreSQL.*')

- name: Add MSSQL to cloudbeaver
  ansible.builtin.uri:
    url: https://cloudbeaver-{{ cloudbeaver_project_name }}.{{ apps_endpoint_domain }}/api/gql
    validate_certs: false
    method: POST
    headers:
      content-type: "application/json"
      Cookie: "cb-session-id={{ cb_session_id }}"
    body_format: json
    body:
      query: 'mutation {
          createConnection(
            config: {credentials: {userName: "sa", userPassword: "{{ cloudbeaver_mssql_universal_password }}"},
            saveCredentials: true, driverId: "sqlserver:microsoft", host: "{{ cloudbeaver_mssql_hostname }}",
            port: "1433", databaseName: "master", name:"MSSQL"}
            projectId: "g_GlobalConfiguration"
          ) {
            id
          }
        }'
  register: cloudbeaver_create_response
  failed_when: cloudbeaver_create_response.status != 200 or cloudbeaver_create_response.json.errors is defined
  when: _current_cp4ba_cluster.rpa.enabled and cloudbeaver_existing_response is not search('.*MSSQL.*')
