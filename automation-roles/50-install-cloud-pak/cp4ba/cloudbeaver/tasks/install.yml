# Based on https://github.com/dbeaver/cloudbeaver
# server conf https://dbeaver.com/docs/cloudbeaver/Server-configuration/
# datasources https://dbeaver.com/docs/cloudbeaver/Configuring-server-datasources/

- name: Create cloudbeaver directory for generated files
  ansible.builtin.file:
    path: "{{ cloudbeaver_output_directory }}"
    state: directory
    mode: u+rwx

- name: Create Project
  ansible.builtin.include_role:
    name: common
    tasks_from: create-project
  vars:
    common_namespace_name: cloudbeaver
    common_output_directory: "{{ cloudbeaver_output_directory }}"

- name: Prepare yaml file for PVC
  ansible.builtin.template:
    src: pvc.yaml.j2
    dest: "{{ cloudbeaver_output_directory }}/pvc.yaml"
    mode: u+rwx

- name: Add PVC
  kubernetes.core.k8s:
    state: present
    force: false
    merge_type: merge
    src: "{{ cloudbeaver_output_directory }}/pvc.yaml"
    wait: true
    wait_sleep: 15
    wait_timeout: 15

- name: Prepare yaml file for Secrets
  ansible.builtin.template:
    src: secrets.yaml.j2
    dest: "{{ cloudbeaver_output_directory }}/secrets.yaml"
    mode: u+rwx

- name: Add Secrets
  kubernetes.core.k8s:
    state: present
    force: false
    merge_type: merge
    src: "{{ cloudbeaver_output_directory }}/secrets.yaml"
    wait: true
    wait_sleep: 15
    wait_timeout: 15

- name: Prepare yaml file for anyuid RoleBinding
  ansible.builtin.template:
    src: anyuid-scc-rolebinding.yaml.j2
    dest: "{{ cloudbeaver_output_directory }}/anyuid-scc-rolebinding.yaml"
    mode: u+rwx

- name: Add anyuid RoleBinding
  kubernetes.core.k8s:
    state: present
    force: false
    merge_type: merge
    src: "{{ cloudbeaver_output_directory }}/anyuid-scc-rolebinding.yaml"
    wait: true
    wait_sleep: 15
    wait_timeout: 15

- name: Prepare yaml file for Deployment
  ansible.builtin.template:
    src: deployment.yaml.j2
    dest: "{{ cloudbeaver_output_directory }}/deployment.yaml"
    mode: u+rwx

- name: Add Deployment
  kubernetes.core.k8s:
    state: present
    force: false
    merge_type: merge
    src: "{{ cloudbeaver_output_directory }}/deployment.yaml"
    wait: true
    wait_sleep: 10
    wait_timeout: 600

- name: Prepare yaml file for Service
  ansible.builtin.template:
    src: service.yaml.j2
    dest: "{{ cloudbeaver_output_directory }}/service.yaml"
    mode: u+rwx

- name: Add Service
  kubernetes.core.k8s:
    state: present
    force: false
    merge_type: merge
    src: "{{ cloudbeaver_output_directory }}/service.yaml"
    wait: true
    wait_sleep: 15
    wait_timeout: 15

- name: Get OCP Apps Endpoint
  ansible.builtin.include_role:
    name: common
    tasks_from: apps-endpoint
  vars:
    common_output_to_var: "apps_endpoint_domain"
  when: apps_endpoint_domain is not defined

- name: Get OCP Apps Endpoint
  ansible.builtin.include_role:
    name: common
    tasks_from: apps-endpoint
  vars:
    common_output_to_var: "apps_endpoint_domain"
  when: apps_endpoint_domain is not defined

- name: Crete Edge Route
  ansible.builtin.include_role:
    name: common
    tasks_from: create-edge-route
  vars:
    common_namespace_name: cloudbeaver
    common_route_name: cloudbeaver
    common_service_name: cloudbeaver
    common_apps_endpoint_domain: "{{ apps_endpoint_domain }}"
    common_output_directory: "{{ cloudbeaver_output_directory }}"

- name: Hash universal password MD5
  ansible.builtin.set_fact:
    cb_universal_password_md5: "{{ cloudbeaver_universal_password | md5 | upper }}"

- name: Get OCP Apps domain
  ansible.builtin.include_role:
    name: common
    tasks_from: apps-endpoint
  vars:
    common_output_to_var: "apps_endpoint_domain"

- name: Login to cloudbeaver
  ansible.builtin.uri:
    url: https://cloudbeaver.{{ apps_endpoint_domain }}/api/gql
    validate_certs: false
    method: POST
    headers:
      content-type: "application/json"
    body_format: json
    body:
      query: 'query {
          authLogin(credentials: {user: "{{ lc_principal_admin_user }}", password: "{{ cb_universal_password_md5 }}"}, provider: "local") {
            authStatus
          }
        }'
  register: cloudbeaver_login_response
  failed_when: cloudbeaver_login_response.status != 200 or cloudbeaver_login_response.json.errors is defined

- name: Get session id
  ansible.builtin.set_fact:
    cb_session_id: "{{ cloudbeaver_login_response.cookies['cb-session-id'] }}"

- name: Delete PostgreSQL Template
  ansible.builtin.uri:
    url: https://cloudbeaver.{{ apps_endpoint_domain }}/api/gql
    validate_certs: false
    method: POST
    headers:
      content-type: "application/json"
      Cookie: "cb-session-id={{ cb_session_id }}"
    body_format: json
    body:
      query: 'mutation {
          deleteConnection(projectId: "g_GlobalConfiguration" id: "postgresql-template-1")
        }'
  register: cloudbeaver_delete_response
  failed_when: cloudbeaver_delete_response.status != 200 or
    (cloudbeaver_delete_response.json.errors is defined and
      cloudbeaver_delete_response.json.errors is not search('Connection \'postgresql-template-1\' not found'))

- name: Get existing connections
  ansible.builtin.uri:
    url: https://cloudbeaver.{{ apps_endpoint_domain }}/api/gql
    validate_certs: false
    method: POST
    headers:
      content-type: "application/json"
      Cookie: "cb-session-id={{ cb_session_id }}"
    body_format: json
    body:
      query: 'query {
          userConnections {
            name
          }
        }'
  register: cloudbeaver_existing_response
  failed_when: cloudbeaver_existing_response.status != 200 or cloudbeaver_existing_response.json.errors is defined

- name: Add PostgreSQL to cloudbeaver
  ansible.builtin.uri:
    url: https://cloudbeaver.{{ apps_endpoint_domain }}/api/gql
    validate_certs: false
    method: POST
    headers:
      content-type: "application/json"
      Cookie: "cb-session-id={{ cb_session_id }}"
    body_format: json
    body:
      query: 'mutation createConnection($providerProperties: Object) {
          createConnection(
            config: { credentials: {userName: "{{ lc_principal_admin_user }}", userPassword: "{{ cloudbeaver_postgresql_universal_password }}"},
            saveCredentials: true, driverId: "postgresql:postgres-jdbc", host: "postgresql.postgresql.svc.cluster.local", port: "5432",
            databaseName: "postgres" name:"PostgreSQL",
            providerProperties: $providerProperties}
            projectId: "g_GlobalConfiguration"
          ) {
            id
          }
        }'
      variables: {
        "providerProperties": {
          "@dbeaver-show-non-default-db@": true
        }
      }
  register: cloudbeaver_create_response
  failed_when: cloudbeaver_create_response.status != 200 or cloudbeaver_create_response.json.errors is defined
  when: cloudbeaver_existing_response is not search('.*PostgreSQL.*')

- name: Add MSSQL to cloudbeaver
  ansible.builtin.uri:
    url: https://cloudbeaver.{{ apps_endpoint_domain }}/api/gql
    validate_certs: false
    method: POST
    headers:
      content-type: "application/json"
      Cookie: "cb-session-id={{ cb_session_id }}"
    body_format: json
    body:
      query: 'mutation {
          createConnection(
            config: {credentials: {userName: "sa", userPassword: "{{ cloudbeaver_mssql_universal_password }}"},
            saveCredentials: true, driverId: "sqlserver:microsoft", host: "mssql.mssql.svc.cluster.local",
            port: "1433", databaseName: "master", name:"MSSQL"}
            projectId: "g_GlobalConfiguration"
          ) {
            id
          }
        }'
  register: cloudbeaver_create_response
  failed_when: cloudbeaver_create_response.status != 200 or cloudbeaver_create_response.json.errors is defined
  when: current_cp4ba_cluster.rpa.enabled and cloudbeaver_existing_response is not search('.*MSSQL.*')

- name: Add MySQL to cloudbeaver
  ansible.builtin.uri:
    url: https://cloudbeaver.{{ apps_endpoint_domain }}/api/gql
    validate_certs: false
    method: POST
    headers:
      content-type: "application/json"
      Cookie: "cb-session-id={{ cb_session_id }}"
    body_format: json
    body:
      query: 'mutation {
          createConnection(
            config: {credentials: {userName: "root", userPassword: "{{ cloudbeaver_mysql_universal_password }}"},
            saveCredentials: true, driverId: "mysql:mysql8", host: "mysql.mysql.svc.cluster.local",
            port: "3306", databaseName: "information_schema", name:"MySQL", properties: {allowPublicKeyRetrieval: "TRUE"}}
            projectId: "g_GlobalConfiguration"
          ) {
            id
          }
        }'
  register: cloudbeaver_create_response
  failed_when: cloudbeaver_create_response.status != 200 or cloudbeaver_create_response.json.errors is defined
  when: current_cp4ba_cluster.rpa.enabled and cloudbeaver_existing_response is not search('.*MSSQL.*')
