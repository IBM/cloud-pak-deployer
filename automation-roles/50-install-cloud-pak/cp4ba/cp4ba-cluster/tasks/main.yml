---

# ------------ PREPARATION ------------------------------------------

- name: Debug message
  ansible.builtin.debug:
    msg: "Handling CP4BA cluster {{ current_cp4ba_cluster.project }}"

- name: License acceptance determination
  ansible.builtin.set_fact:
    _cpd_accept_licenses: "{{ current_cp4ba_cluster.accept_licenses | default(cpd_accept_licenses) | default(False) }}"

- name: Fail if licenses were not accepted
  ansible.builtin.fail:
    msg: "You must accept the licenses, either in the cp4ba object with accept_licenses: True, or by specifying --accept-all-licenses at the command line"
  when: not (_cpd_accept_licenses | bool)

- name: Determine current OCP cluster
  ansible.builtin.set_fact:
    _current_openshift_cluster: "{{ all_config.openshift | json_query(query) | first | default({}) }}"
  vars:
    query: >-
      [?name=='{{ current_cp4ba_cluster.openshift_cluster_name }}']

- name: Download and activate OpenShift client for version {{ _current_openshift_cluster.ocp_version }}
  ansible.builtin.include_role:
    name: openshift-download-client
  vars:
    _p_ocp_version: "{{ _current_openshift_cluster.ocp_version }}"

- name: Login to the OpenShift cluster
  ansible.builtin.include_role:
    name: openshift-login
  vars:
    _p_openshift_cluster_name: "{{ current_cp4ba_cluster.openshift_cluster_name }}"

- name: Get IBM Entitled Registry key
  ansible.builtin.include_role:
    name: vault-get-secret
  vars:
    secret_name: "ibm_cp_entitlement_key"
    secret_group: "{{ environment_name }}"

- name: Retrieve icr key
  ansible.builtin.set_fact:
    ibm_cp_entitlement_key: "{{ secret_value }}"

- name: Fail if icr wrong
  ansible.builtin.fail:
    msg: "No image registry name specified for CP4BA but cannot pull from entitled registry because of missing entitlement key in vault"
  when: ibm_cp_entitlement_key == "" and (current_cp4ba_cluster.image_registry_name | default("")) == ""

- name: Determine entitled_auth
  ansible.builtin.set_fact:
    entitled_auth: "{{ entitled_registry_username }}:{{ ibm_cp_entitlement_key }}"
  when: ibm_cp_entitlement_key != ""

- name: Set use_entitled_registry
  ansible.builtin.set_fact:
    use_entitled_registry: false

- name: Use entitled registry if entitlement key available and no image registry name specified
  ansible.builtin.set_fact:
    use_entitled_registry: true
  when:
    - (current_cp4ba_cluster.image_registry_name | default("")) == ""

- name: Connect to private image registry
  ansible.builtin.include_role:
    name: connect-private-image-registry
  when:
    - (current_cp4ba_cluster.image_registry_name | default("")) != ""

- name: Remove Cloud Pak for Business Automation directory for generated files
  ansible.builtin.file:
    path: "{{ status_dir }}/cp4ba"
    state: absent

- name: Create Cloud Pak for Business Automation directory for generated files
  ansible.builtin.file:
    path: "{{ status_dir }}/cp4ba"
    state: directory
    mode: u+rwx

- name: Get OpenShift storage classes to use for {{ current_cp4ba_cluster.project }} and storage class name {{ current_cp4ba_cluster.openshift_storage_name }}
  ansible.builtin.include_role:
    name: get-openshift-storage
  vars:
    _p_openshift_cluster_name: "{{ current_cp4ba_cluster.openshift_cluster_name }}"
    _p_openshift_storage_name: "{{ current_cp4ba_cluster.openshift_storage_name }}"

- name: Create global_action variable
  ansible.builtin.set_fact:
    global_action: "{{ 'install' if current_cp4ba_cluster.state == 'installed' else 'remove' }}"

- name: Create icr_password variable
  ansible.builtin.set_fact:
    icr_password: "{{ ibm_cp_entitlement_key }}"

- name: Create storage_class_name variable
  ansible.builtin.set_fact:
    storage_class_name: "{{ ocp_storage_class_file }}"

- name: Create block_storage_class_name variable
  ansible.builtin.set_fact:
    block_storage_class_name: "{{ ocp_storage_class_block }}"

- name: Determine OCP type
  ansible.builtin.include_role:
    name: retrieve-cloud-infra-type
  vars:
    _p_openshift_cluster_name: "{{ current_cp4ba_cluster.openshift_cluster_name }}"

- name: Create deployment_platform variable
  ansible.builtin.set_fact:
    deployment_platform: "{{ 'ROKS' if _existing_ocp_infra_type == 'ibm-roks' else 'OCP' }}"

# - name: Get universal_password key from vault
#   ansible.builtin.include_role:
#     name: vault-get-secret
#   vars:
#     secret_name: "universal_password"
#     secret_group: "{{ environment_name }}"

# - name: Create universal_password variable
#   ansible.builtin.set_fact:
#     universal_password: "{{ secret_value }}"

- name: Prepare the Playbook Configuration variables
  ansible.builtin.include_role:
    name: config

- name: Install CP4BA
  ansible.builtin.include_tasks: install.yml
  when: "global_action == 'install'"

- name: Remove CP4BA
  ansible.builtin.include_tasks: remove.yml
  when: "global_action == 'remove'"
