mutation createDataSet {
  createDataSet(
    startTimestamp: "2021-05-05T00:00:00.000Z"
    endTimestamp: "2021-05-07T00:00:00.000Z"
    notes: "Automatically created by Nick's scripts"
    connections:""
  ) {
    dataSetId
  }
}


mutation createTrainingDefinition {
  createTrainingDefinition(
    definitionName: "LogAnomalyDetection"
    algorithmName: Log_Anomaly_Detection
    dataSetIds: "G6SSnH4BWKNKgDnQH8zu"
    version: "v0"
    description: "Automatically created by Nick's scripts"
    createdBy: "demo"
    promoteOption: whenTrainingComplete
    trainingSchedule: {
      frequency: manual
      repeat: daily
      timeRangeValidStart: null
      timeRangeValidEnd: null
      noEndDate: false
    }
  ) {
    status
    message
  }
}


{
  "data": {
    "createTrainingDefinition": {
      "status": "SUCCEEDED",
      "message": "Training definition created successfully"
    }
  }
}


mutation startTrainingRun {
  startTrainingRun(definitionName: "LogAnomalyDetection") {
    message
    status
  }
}




mutation createTrainingDefinition {
  createTrainingDefinition(
    definitionName: "TemporalGrouping"
    algorithmName: Temporal_Grouping
    version: "v0"
    description: "Automatically created by Nick's scripts"
    createdBy: "demo"
    promoteOption: manual
    trainingSchedule: {
      frequency: scheduled
      repeat: daily
      timeRangeValidStart: "2022-01-26T00:00:00.000+01:00"
      timeRangeValidEnd: null
      noEndDate: true
    }
  ) {
    status
    message
  }
}


mutation startTrainingRun {
  startTrainingRun(definitionName: "TemporalGrouping") {
    message
    status
  }
}





mutation createTrainingDefinition {
  createTrainingDefinition(
    definitionName: "ChangeRisk"
    algorithmName: Change_Risk
    version: "v0"
    description: "Automatically created by Nick's scripts"
    createdBy: "demo"
    promoteOption: whenTrainingComplete
    trainingSchedule: {
      frequency: manual
      repeat: daily
      timeRangeValidStart: null
      timeRangeValidEnd: null
      noEndDate: false
    }
  ) {
    status
    message
  }
}


mutation startTrainingRun {
  startTrainingRun(definitionName: "ChangeRisk") {
    message
    status
  }
}





mutation createTrainingDefinition {
  createTrainingDefinition(
    definitionName: "SimilarIncidents"
    algorithmName: Similar_Incidents
    version: "v0"
    description: "Automatically created by Nick's scripts"
    createdBy: "demo"
    promoteOption: whenTrainingComplete
    trainingSchedule: {
      frequency: manual
      repeat: daily
      timeRangeValidStart: null
      timeRangeValidEnd: null
      noEndDate: false
    }
  ) {
    status
    message
  }
}


mutation startTrainingRun {
  startTrainingRun(definitionName: "SimilarIncidents") {
    message
    status
  }
}












mutation createDataSet {
  createDataSet(
    startTimestamp: "2022-01-26T00:00:00.000Z"
    endTimestamp: "2022-01-28T00:00:00.000Z"
    notes: "TEST SET"
    connections:""
  ) {
    dataSetId
  }
}





{
  "data": {
    "getTrainingDefinitions": [
      {
        "definitionName": "LogAnomalyDetection1",
        "description": "LogAnomalyDetection1",
          "dataSets": [
          {
            "dataSetId": "mqMJm34BWKNKgDnQZD6M"
          }
        ]
      }
    ]
  }
}




{
  "data": {
    "createDataSet": {
      "dataSetId": "G6SSnH4BWKNKgDnQH8zu"
    }
  }
}








mutation startTrainingRun {
    startTrainingRun(definitionName: "CR") {
      message
      status
    }
  }



query {
    getRegisteredAlgorithms {
      algorithmName
    }
  }
  {
    "data": {
      "getRegisteredAlgorithms": [
        {
          "algorithmName": "Topological_Grouping"
        },
        {
          "algorithmName": "Similar_Incidents"
        },
        {
          "algorithmName": "Log_Anomaly_Detection"
        },
        {
          "algorithmName": "Temporal_Grouping"
        },
        {
          "algorithmName": "Change_Risk"
        },
        {
          "algorithmName": "Probable_Cause"
        },
        {
          "algorithmName": "Scope_Based_Grouping"
        },
        {
          "algorithmName": "Moving_Average_Log_Anomaly_Detection"
        }
      ]
    }
  }
  
  mutation toggleAlgorithmEnablement("Moving_Average_Log_Anomaly_Detection") {
    toggleAlgorithmEnablement(algorithmName: "Moving_Average_Log_Anomaly_Detection") {
      message
      status
    }
  }



mutation createDataSet(
startTimestamp: "2022-01-11T00:00:00.000Z"
endTimestamp: "2022-01-14T00:00:00.000Z"
  connections: String!
exclusionStartTimestamps: "2022-01-11T00:00:00.000Z"
exclusionEndTimestamps: "2022-01-11T00:00:00.000Z"
notes: "TEST"
)

mutation createDataSet(
  $startTimestamp: "2022-01-11T00:00:00.000Z"
  $endTimestamp: "2022-01-11T00:00:00.000Z"
  $connections: ""
  $exclusionStartTimestamps: "2022-01-11T00:00:00.000Z"
  $exclusionEndTimestamps: "2022-01-11T00:00:00.000Z"
  $notes: "TEST"
) {
  createDataSet(
    startTimestamp: $startTimestamp
    endTimestamp: $endTimestamp
    connections: $connections
    exclusionStartTimestamps: $exclusionStartTimestamps
    exclusionEndTimestamps: $exclusionEndTimestamps
    notes: $notes
  ) {
    message
    status
    dataSetId
  }
}


query {
    getTrainingDefinitions(definitionName: "LAD") {
      definitionName
      version
      deployedVersion
      description
      createdBy
      modelDeploymentDate
      trainedModels(latest: true) {
        modelStatus
        trainingStartTimestamp
        trainingEndTimestamp
        precheckTrainingDetails {
          dataQuality
          dataQualityDetails {
            report
            languageInfo {
              language
            }
          }
        }
        postcheckTrainingDetails {
          aiCoverage
          overallModelQuality
          modelsCreatedList {
            modelId
            associatedResourcesList
            modelQuality
            modelQualityDetails
          }
        }
      }
      lastTraining
    }
  }
------------------------------





query {
    getTrainingDefinitions(definitionName: "LAD") {
      definitionName
      algorithmName 
      trainedModels(latest: true) {
        modelStatus
        version
      }
    }
  }

  



  getDataSets
  query {
    getDataSets {
      definitionName
    
    }
  }

  query {
    getTrainingDefinitions {
      definitionName
      algorithmName 
      trainedModels(latest: true) {
        modelStatus
        version
      }
    }
  }

  

  # Write your query or mutation here
  query {
    getTrainingDefinitions {
      definitionName
      algorithmName
      description
      version
      lastTraining
      trainingSchedule {
        frequency
        repeat
        timeRangeValidStart
        timeRangeValidEnd
        noEndDate
      }
      dataSets {
        dataSetId
      }
  
      trainedModels(latest: true) {
        modelStatus
        version
        postcheckTrainingDetails {
          aiCoverage
          overallModelQuality
          modelsCreatedList {
            associatedResourcesList
          }
        }
      }
    }
  }
  


  query {
    getTrainingDefinitions {
      definitionName
      algorithmName
      description
      version
      deployedVersion
      lastTraining
      trainingSchedule {
        frequency
        repeat
        timeRangeValidStart
        timeRangeValidEnd
        noEndDate
      }
      trainedModels(latest: true) {
        trainingStartTimestamp
        trainingEndTimestamp
        modelStatus
        postcheckTrainingDetails {
            aiCoverage
            overallModelQuality
            modelsCreatedList {
              associatedResourcesList
            }
          }
      }
      dataSets {
        dataSetId
      }
    }
  }


  query {
    getTrainingDefinitions(definitionName: "LAD") {
      definitionName
      version
      deployedVersion
      description
      createdBy
      modelDeploymentDate
      trainedModels(latest: true) {
        modelStatus
        trainingStartTimestamp
        trainingEndTimestamp
        precheckTrainingDetails {
          dataQuality
          dataQualityDetails {
            report
            languageInfo {
              language
            }
          }
        }
        postcheckTrainingDetails {
          aiCoverage
          overallModelQuality
          modelsCreatedList {
            modelId
            associatedResourcesList
            modelQuality
            modelQualityDetails
          }
        }
      }
      lastTraining
    }
  }


export const DEPLOY_TRAINING = gql`
mutation deployModel($definitionName: String!, $version: String!) {
  deployModel(definitionName: $definitionName, version: $version) {
    message
    status
  }
}
`

export const DELETE_MODEL = gql`
mutation deleteModel($definitionName: String!, $version: String!) {
  deleteModel(definitionName: $definitionName, version: $version) {
    message
    status
  }
}
`

  export const START_TRAINING = gql`
  mutation startTrainingRun($definitionName: String!) {
    startTrainingRun(definitionName: $definitionName) {
      message
      status
    }
  }
`

export const DEPLOY_TRAINING = gql`
  mutation deployModel($definitionName: String!, $version: String!) {
    deployModel(definitionName: $definitionName, version: $version) {
      message
      status
    }
  }
`

export const UNDEPLOY_TRAINING = gql`
  mutation undeployModel($definitionName: String!) {
    undeployModel(definitionName: $definitionName) {
      message
      status
    }
  }




export const CREATE_DATASET = gql`
mutation createDataSet(
  $startTimestamp: DateTime!
  $endTimestamp: DateTime!
  $connections: String!
  $exclusionStartTimestamps: [DateTime]
  $exclusionEndTimestamps: [DateTime]
  $notes: String
) {
  createDataSet(
    startTimestamp: $startTimestamp
    endTimestamp: $endTimestamp
    connections: $connections
    exclusionStartTimestamps: $exclusionStartTimestamps
    exclusionEndTimestamps: $exclusionEndTimestamps
    notes: $notes
  ) {
    message
    status
    dataSetId
  }
}
`
"2022-01-11T00:00:00.000Z"

export const DELETE_DATASET = gql`
mutation deleteDataSet($dataSetId: ID!, $definitionName: String!) {
  deleteDataSet(dataSetId: $dataSetId, definitionName: $definitionName) {
    message
    status
  }
}
`


export const GET_REGISTERED_ALGORITHMS = gql`
  query {
    getRegisteredAlgorithms {
      algorithmName
      algorithmDescription
      isRegistered
      lastChange
      runtimeName
      version
      manifestBase64
      isEnabled
    }
  }
`
export const TOGGLE_ALGORITHM = gql`
  mutation toggleAlgorithmEnablement($algorithmName: SupportedAlgorithms!) {
    toggleAlgorithmEnablement(algorithmName: $algorithmName) {
      message
      status
    }
  }



  


export const GET_TRAINING_DEFINITION_CONFIG = gql`
query($definitionName: String) {
  getTrainingDefinitions(definitionName: $definitionName) {
    definitionName
    description
    algorithmName
    dateCreated
    createdBy
    trainingSchedule {
      frequency
      repeat
      atTimeHour
      atTimeMinute
      timeRangeValidStart
      timeRangeValidEnd
      noEndDate
    }
    promoteOption
    dataSets {
      dataSetId
      connections
      startTimestamp
      endTimestamp
      exclusionStartTimestamps
      exclusionEndTimestamps
      notes
    }
  }
}
`

export const CREATE_TRAINING_DEFINITION = gql`
mutation createTrainingDefinition(
  $definitionName: String!
  $description: String!
  $algorithmName: SupportedAlgorithms!
  $createdBy: String
  $trainingSchedule: TrainingScheduleInput!
  $promoteOption: PromoteOption!
  $dataSetIds: [ID]
  $version: String!
) {
  createTrainingDefinition(
    definitionName: $definitionName
    description: $description
    algorithmName: $algorithmName
    createdBy: $createdBy
    trainingSchedule: $trainingSchedule
    promoteOption: $promoteOption
    dataSetIds: $dataSetIds
    version: $version
  ) {
    status
    message
  }
}
`

export const UPDATE_TRAINING_DEFINITION_SCHEDULE = gql`
mutation updateTrainingDefinition(
  $definitionName: String!
  $trainingSchedule: TrainingScheduleInput
) {
  updateTrainingDefinition(
    definitionName: $definitionName
    trainingSchedule: $trainingSchedule
  ) {
    message
    status
  }
}
`

export const UPDATE_TRAINING_DEFINITION_PROMOTE = gql`
mutation updateTrainingDefinition(
  $definitionName: String!
  $promoteOption: PromoteOption
) {
  updateTrainingDefinition(
    definitionName: $definitionName
    promoteOption: $promoteOption
  ) {
    message
    status
  }
}
`

export const UPDATE_TRAINING_DEFINITION_PROMOTE_SCHED = gql`
mutation updateTrainingDefinition(
  $definitionName: String!
  $trainingSchedule: TrainingScheduleInput
  $promoteOption: PromoteOption
) {
  updateTrainingDefinition(
    definitionName: $definitionName
    trainingSchedule: $trainingSchedule
    promoteOption: $promoteOption
  ) {
    message
    status
  }
}
`

export const UPDATE_TRAINING_DEFINITION_DS = gql`
mutation updateTrainingDefinition(
  $definitionName: String!
  $dataSetIds: [ID]
) {
  updateTrainingDefinition(
    definitionName: $definitionName
    dataSetIds: $dataSetIds
  ) {
    message
    status
  }
}
`

export const UPDATE_TRAINING_DEFINITION_DESC = gql`
mutation updateTrainingDefinition(
  $definitionName: String!
  $description: String!
) {
  updateTrainingDefinition(
    definitionName: $definitionName
    description: $description
  ) {
    message
    status
  }
}
`

export const DELETE_TRAINING_DEFINITION = gql`
mutation deleteTrainingDefinition($definitionName: String!) {
  deleteTrainingDefinition(definitionName: $definitionName) {
    message
    status
  }
}
`

