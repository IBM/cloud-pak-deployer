

- name: 🛰️  START - CREATE RUNBOOKS TRIGGER POLICY
  debug: 
    msg="{{ lookup('pipe','date +%d.%m.%Y---%H:%M:%S') }}"


- name: Log
  shell: |
    export MESSAGE="Create Runbooks Trigger Policy"
    export currentDate=$(date +%Y-%m-%d_%H:%M)
    echo "---------------------------------------------------------------------------------------------------------------------------------------------------" >> ../install_{{current_cp4waiops_feature.kind}}.log
    echo $currentDate" - "$USER" - "$MESSAGE  >> ../install_{{current_cp4waiops_feature.kind}}.log
  ignore_errors: yes


- name: 🛠️  POLICIES - Create Runbooks Trigger Policy
  shell: |
    export WAIOPS_NAMESPACE=$(oc get po -A|grep aiops-orchestrator-controller |awk '{print$1}')
    ZEN_API_HOST=$(oc get route -n $WAIOPS_NAMESPACE cpd -o jsonpath='{.spec.host}')
    ZEN_LOGIN_URL="https://${ZEN_API_HOST}/v1/preauth/signin"
    LOGIN_USER=admin
    LOGIN_PASSWORD="$(oc get secret admin-user-details -n $WAIOPS_NAMESPACE -o jsonpath='{ .data.initial_admin_password }' | base64 --decode)"

    ZEN_LOGIN_RESPONSE=$(
    curl -k \
    -H 'Content-Type: application/json' \
    -XPOST \
    "${ZEN_LOGIN_URL}" \
    -d '{
          "username": "'"${LOGIN_USER}"'",
          "password": "'"${LOGIN_PASSWORD}"'"
    }' 2> /dev/null
    )

    ZEN_TOKEN=$(echo "${ZEN_LOGIN_RESPONSE}" | jq -r .token)
    echo $ZEN_TOKEN

    export ROUTE=$(oc get route -n $WAIOPS_NAMESPACE cpd -o jsonpath={.spec.host})
    echo "ROUTE: "$ROUTE
    export result=$(curl -X "GET" -k "https://$ROUTE/aiops/api/story-manager/rba/v1/runbooks" \
          -H "Authorization: bearer $ZEN_TOKEN" \
          -H 'Content-Type: application/json; charset=utf-8' )

    echo "RESULT:"$result

    export RUNBOOK_ID=$(echo $result| sed 's/\\\\"/\"/g'|jq -r '.[]| select(.name|contains("Mitigate"))|._runbookId'| head -n 1)
    echo "RUNBOOK_ID: $RUNBOOK_ID"


    # Create Runbook Trigger Policy
    export POLICY_FILE="{{role_path}}/templates/policies/runbook-trigger-policy.json"
    cp $POLICY_FILE /tmp/runbook_policy.json
    cat /tmp/runbook_policy.json
    echo "RUNBOOK_ID: $RUNBOOK_ID"

    sed -i -e "s/MY_RUNBOOK_ID/$RUNBOOK_ID/g" /tmp/runbook_policy.json
    cat /tmp/runbook_policy.json


    export POLICY_USERNAME=$(oc get secret -n $WAIOPS_NAMESPACE aiops-ir-lifecycle-policy-registry-svc -o jsonpath='{.data.username}' | base64 --decode)
    export POLICY_PASSWORD=$(oc get secret -n $WAIOPS_NAMESPACE aiops-ir-lifecycle-policy-registry-svc -o jsonpath='{.data.password}' | base64 --decode)
    export POLICY_LOGIN="$POLICY_USERNAME:$POLICY_PASSWORD"
    echo $POLICY_LOGIN

    oc create route reencrypt policy-api -n $WAIOPS_NAMESPACE --service aiops-ir-lifecycle-policy-registry-svc --port ssl-port

    export POLICY_ROUTE=$(oc get routes -n $WAIOPS_NAMESPACE policy-api -o jsonpath="{['spec']['host']}")
    echo $POLICY_ROUTE


    export result=$(curl -XGET -k -s "https://$POLICY_ROUTE/policyregistry.ibm-netcool-prod.aiops.io/v1alpha/system/cfd95b7e-3bc7-4006-a4a8-a73a79c71255/"  \
      -H 'X-TenantID: cfd95b7e-3bc7-4006-a4a8-a73a79c71255' \
      -H 'content-type: application/json' \
      -u $POLICY_LOGIN|grep "DEMO RobotShop Mitigation"|wc -l|tr -d ' ')
    if [[ $result == "0" ]]; then

      export result=$(curl -XPOST -k -s "https://$POLICY_ROUTE/policyregistry.ibm-netcool-prod.aiops.io/v1alpha/system/cfd95b7e-3bc7-4006-a4a8-a73a79c71255/policies"  \
        -H 'X-TenantID: cfd95b7e-3bc7-4006-a4a8-a73a79c71255' \
        -H 'content-type: application/json' \
        -u $POLICY_LOGIN \
        -d @/tmp/runbook_policy.json)
    else 
      export result="Already exists"
    fi 
    echo $result

  ignore_errors: yes
  register: POLICY_RESULT
  args:
    executable: /bin/bash

- name: 🟢 OUTPUT
  debug: 
    var: POLICY_RESULT.stdout_lines


