


- name: üõ∞Ô∏è  START - CREATE LOG ANALYSIS DEFINITIONS
  debug: 
    msg="{{ lookup('pipe','date +%d.%m.%Y---%H:%M:%S') }}"




- name: Log
  shell: |
    export MESSAGE="Create LAD Training Definition"
    export currentDate=$(date +%Y-%m-%d_%H:%M)
    echo "---------------------------------------------------------------------------------------------------------------------------------------------------" >> ../install_{{current_cp4waiops_feature.kind}}.log
    echo $currentDate" - "$USER" - "$MESSAGE  >> ../install_{{current_cp4waiops_feature.kind}}.log
  ignore_errors: yes



- name: üöÄ TRAINING CREATE LAD - CREATE LAD CONFIGURATION
  shell: |
    set -x
    export ROUTE=""
    export WAIOPS_NAMESPACE=$(oc get po -A|grep aiops-orchestrator-controller |awk '{print$1}')


    if [[ ! $ROUTE =~ "ai-platform-api" ]]; then
          echo "       üõ†Ô∏è   Create Route"
          oc create route passthrough ai-platform-api -n $WAIOPS_NAMESPACE  --service=aimanager-aio-ai-platform-api-server --port=4000 --insecure-policy=Redirect --wildcard-policy=None
          export ROUTE=$(oc get route -n $WAIOPS_NAMESPACE ai-platform-api  -o jsonpath={.spec.host})
          echo "        Route: $ROUTE"
          echo ""
    fi
 
    if [[ $ZEN_TOKEN == "" ]]; then
          echo "       üõ†Ô∏è   Getting ZEN Token"
        
          ZEN_API_HOST=$(oc get route -n $WAIOPS_NAMESPACE cpd -o jsonpath='{.spec.host}')
          ZEN_LOGIN_URL="https://${ZEN_API_HOST}/v1/preauth/signin"
          LOGIN_USER=admin
          LOGIN_PASSWORD="$(oc get secret admin-user-details -n $WAIOPS_NAMESPACE -o jsonpath='{ .data.initial_admin_password }' | base64 --decode)"

          ZEN_LOGIN_RESPONSE=$(
          curl -k \
          -H 'Content-Type: application/json' \
          -XPOST \
          "${ZEN_LOGIN_URL}" \
          -d '{
                "username": "'"${LOGIN_USER}"'",
                "password": "'"${LOGIN_PASSWORD}"'"
          }' 2> /dev/null
          )

          ZEN_LOGIN_MESSAGE=$(echo "${ZEN_LOGIN_RESPONSE}" | jq -r .message)

          if [ "${ZEN_LOGIN_MESSAGE}" != "success" ]; then
          echo "Login failed: ${ZEN_LOGIN_MESSAGE}" 1>&2

          exit 2
          fi

          ZEN_TOKEN=$(echo "${ZEN_LOGIN_RESPONSE}" | jq -r .token)
          echo "${ZEN_TOKEN}"

          echo "Sucessfully logged in" 1>&2

          echo ""
    fi

    echo "***************************************************************************************************************************************************"
    echo "   üõ†Ô∏è   Turn off RSA - Log Anomaly Statistical Baseline"
    export FILE_NAME=deactivate-analysis-RSA.graphql
    export FILE_PATH="{{role_path}}/templates/training/training-definitions/"
    {{role_path}}/templates/training/scripts/execute-graphql.sh



    echo "***************************************************************************************************************************************************"
    echo "   üõ†Ô∏è   Create Data Set: Log Anomaly Detection"
    echo "     "	
    echo "      üì• Launch Query for file: create-dataset-LAD.graphql"	
    echo "     "
    QUERY="$(cat {{role_path}}/templates/training/training-definitions/create-dataset-LAD.graphql)"
    JSON_QUERY=$(echo "${QUERY}" | jq -sR '{"operationName": null, "variables": {}, "query": .}')
    export result=$(curl -XPOST "https://$ROUTE/graphql" -k \
    -H 'Accept-Encoding: gzip, deflate, br'  \
    -H 'Content-Type: application/json'  \
    -H 'Accept: application/json'  \
    -H 'Connection: keep-alive'  \
    -H 'DNT: 1'  \
    -H "Origin: $ROUTE"  \
    -H "authorization: Bearer $ZEN_TOKEN"  \
    --data-binary "${JSON_QUERY}"  \
    --compressed)
    export DATA_SET_ID=$(echo $result| jq -r ".data.createDataSet.dataSetId")
    echo "      üîé Result: "
    echo "       "$result|jq ".data" | sed 's/^/          /'
    echo "     "	
    echo "     "	



    echo "***************************************************************************************************************************************************"
    echo "   üõ†Ô∏è   Create Analysis Definiton: Log Anomaly Detection"
    echo "     "	
    echo "      üì• Launch Query for file: create-analysis-LAD.graphql"	
    echo "     "
    QUERY_TMPL="$(cat {{role_path}}/templates/training/training-definitions/create-analysis-LAD.graphql)"
    QUERY=$(echo $QUERY_TMPL | sed "s/<DATA_SET_ID>/$DATA_SET_ID/g")
    JSON_QUERY=$(echo "${QUERY}" | jq -sR '{"operationName": null, "variables": {}, "query": .}')
    export result=$(curl -XPOST "https://$ROUTE/graphql" -k \
    -H 'Accept-Encoding: gzip, deflate, br'  \
    -H 'Content-Type: application/json'  \
    -H 'Accept: application/json'  \
    -H 'Connection: keep-alive'  \
    -H 'DNT: 1'  \
    -H "Origin: $ROUTE"  \
    -H "authorization: Bearer $ZEN_TOKEN"  \
    --data-binary "${JSON_QUERY}"  \
    --compressed)
    echo "      üîé Result: "
    echo "       "$result|jq ".data" | sed 's/^/          /'
    echo "     "	
    echo "     "	


  register: output_string
  ignore_errors: yes
  args:
    executable: /bin/bash
    
- name: üü¢ TRAINING CREATE LAD - RESULT
  debug: 
    var: output_string.stdout_lines
  #when: PRINT_LOGINS == true

