


- name: 🛰️  START - CHECK LAD EXISTS
  debug: 
    msg="{{ lookup('pipe','date +%d.%m.%Y---%H:%M:%S') }}"


- name: Log
  shell: |
    export MESSAGE="Check if Training Exists"
    export currentDate=$(date +%Y-%m-%d_%H:%M)
    echo "---------------------------------------------------------------------------------------------------------------------------------------------------" >> ../install_{{current_cp4waiops_feature.kind}}.log
    echo $currentDate" - "$USER" - "$MESSAGE  >> ../install_{{current_cp4waiops_feature.kind}}.log
  ignore_errors: yes



- name: 🔎 CHECK LAD TRAINING - CHECK TRAINING DEFINITIONS EXISTS
  shell: |
    set -x
    export ROUTE=""
    export WAIOPS_NAMESPACE=$(oc get po -A|grep aiops-orchestrator-controller |awk '{print$1}')


    if [[ ! $ROUTE =~ "ai-platform-api" ]]; then
          #echo "       🛠️   Create Route"
          oc create route passthrough ai-platform-api -n $WAIOPS_NAMESPACE  --service=aimanager-aio-ai-platform-api-server --port=4000 --insecure-policy=Redirect --wildcard-policy=None
          export ROUTE=$(oc get route -n $WAIOPS_NAMESPACE ai-platform-api  -o jsonpath={.spec.host})
          #echo "        Route: $ROUTE"
          #echo ""
    fi
 
    if [[ $ZEN_TOKEN == "" ]]; then
          #echo "       🛠️   Getting ZEN Token"
        
          ZEN_API_HOST=$(oc get route -n $WAIOPS_NAMESPACE cpd -o jsonpath='{.spec.host}')
          ZEN_LOGIN_URL="https://${ZEN_API_HOST}/v1/preauth/signin"
          LOGIN_USER=admin
          LOGIN_PASSWORD="$(oc get secret admin-user-details -n $WAIOPS_NAMESPACE -o jsonpath='{ .data.initial_admin_password }' | base64 --decode)"

          ZEN_LOGIN_RESPONSE=$(
          curl -k \
          -H 'Content-Type: application/json' \
          -XPOST \
          "${ZEN_LOGIN_URL}" \
          -d '{
                "username": "'"${LOGIN_USER}"'",
                "password": "'"${LOGIN_PASSWORD}"'"
          }' 2> /dev/null
          )

          ZEN_LOGIN_MESSAGE=$(echo "${ZEN_LOGIN_RESPONSE}" | jq -r .message)

          if [ "${ZEN_LOGIN_MESSAGE}" != "success" ]; then
          echo "Login failed: ${ZEN_LOGIN_MESSAGE}"

          exit 2
          fi

          ZEN_TOKEN=$(echo "${ZEN_LOGIN_RESPONSE}" | jq -r .token)
          #echo "${ZEN_TOKEN}"
          #echo "Sucessfully logged in" 
          #echo ""
    fi


    #echo "***************************************************************************************************************************************************"
    #echo "   🛠️   Check if Training Definitions already exist"
    #echo "     "	
    #echo "      📥 Launch Query for file: checkLAD.graphql"	
    #echo "     "
    QUERY="$(cat {{role_path}}/templates/training/training-definitions/checkLAD.graphql)"
    JSON_QUERY=$(echo "${QUERY}" | jq -sR '{"operationName": null, "variables": {}, "query": .}')
    #echo $JSON_QUERY
    export result=$(curl -XPOST "https://$ROUTE/graphql" -k \
    -H 'Accept-Encoding: gzip, deflate, br'  \
    -H 'Content-Type: application/json'  \
    -H 'Accept: application/json'  \
    -H 'Connection: keep-alive'  \
    -H 'DNT: 1'  \
    -H "Origin: $ROUTE"  \
    -H "authorization: Bearer $ZEN_TOKEN"  \
    --data-binary "${JSON_QUERY}"  \
    --compressed)
    TRAINING_DEFINITIONS=$(echo $result | jq '.data.getTrainingDefinitions[]| select(.definitionName=="LogAnomalyDetection")|.modelDeploymentDate')
    if [ $TRAINING_DEFINITIONS != "null" ]; then
      echo "true"
    else
      echo "false"

    fi



  register: output_string
  ignore_errors: yes
  args:
    executable: /bin/bash
    
- name: 🔎 CHECK LAD TRAINING
  debug: 
    var: output_string.stdout_lines

- name: 🔎 CHECK LAD TRAINING - Check if Training Definitions already exist
  set_fact: TRAINING_EXISTS={{output_string.stdout_lines[0]}}


- name: 🔎 CHECK LAD TRAINING - RESULT -  MODEL EXISTS - {{TRAINING_EXISTS}}
  debug: 
    var: TRAINING_EXISTS
  #when: PRINT_LOGINS == true


- name: Log
  shell: |
    export MESSAGE="Check if Training Exists"
    export currentDate=$(date +%Y-%m-%d_%H:%M)
    echo $currentDate" - "$USER" - Training exists: {{TRAINING_EXISTS}}"  >> ../install_{{current_cp4waiops_feature.kind}}.log
  ignore_errors: yes


