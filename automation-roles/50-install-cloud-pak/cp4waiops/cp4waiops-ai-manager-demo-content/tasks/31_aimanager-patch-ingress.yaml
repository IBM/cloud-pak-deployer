

# *************************************************************************************************************************************************
# --------------------------------------------------------------------------------------------------------------------------------------
# Patching some stuff
# --------------------------------------------------------------------------------------------------------------------------------------
# *************************************************************************************************************************************************
    

- name: üõ∞Ô∏è  START - PATCH INGRESS
  debug: 
    msg="{{ lookup('pipe','date +%d.%m.%Y---%H:%M:%S') }}"


- name: Log
  shell: |
    export MESSAGE="Create valid Ingress Certificates"
    export currentDate=$(date +%Y-%m-%d_%H:%M)
    echo "---------------------------------------------------------------------------------------------------------------------------------------------------" >> ../install_{{current_cp4waiops_feature.kind}}.log
    echo $currentDate" - "$USER" - "$MESSAGE  >> ../install_{{current_cp4waiops_feature.kind}}.log
  ignore_errors: yes
   

- name: üåè NETWORK - CHECK Ingress already patched
  shell: |
    set -x

    export WAIOPS_NAMESPACE=$(oc get po -A|grep aiops-orchestrator-controller |awk '{print$1}')
    SECRET_COUNT=$(oc get AutomationUIConfig -n $WAIOPS_NAMESPACE -oyaml|grep 'secretName: external-tls-secret'|wc -l|tr -d ' ')
    if [ $SECRET_COUNT -gt 0 ]; then
      echo "true"
    else
      echo "false"
    fi
  register: output_string
  ignore_errors: yes
  args:
    executable: /bin/bash
    
  
- name: üåè NETWORK - DEBUG Ingress already patched
  debug: 
    var: output_string.stdout_lines

- name: üåè NETWORK - ‚òëÔ∏è CHECK Ingress already patched
  set_fact: INGRESS_PATCHED={{output_string.stdout_lines[0]}}



# --------------------------------------------------------------------------------------------------------------------------------------
# Adapt Slack Welcome Message
# --------------------------------------------------------------------------------------------------------------------------------------
- name: üï¶ NETWORK - Wait for Slack Pod Ready
  shell:  |
          export WAIOPS_NAMESPACE=$(oc get po -A|grep aiops-orchestrator-controller |awk '{print$1}')
          oc wait --namespace="$WAIOPS_NAMESPACE" --for=condition=Ready pods $(oc get po -n "$WAIOPS_NAMESPACE"|grep "aimanager-aio-chatops-slack-integrator"|awk '{print$1}') --timeout=600s
  ignore_errors: yes  
  register: slack_ready


- name: üåè NETWORK - Patch NetworkPolicy
  shell: |
    export WAIOPS_NAMESPACE=$(oc get po -A|grep aiops-orchestrator-controller |awk '{print$1}')

    cat <<EOF | oc apply -f -
    apiVersion: networking.k8s.io/v1
    kind: NetworkPolicy
    metadata:
      name: allow-all-egress-and-ingress
      annotations:
        argocd.argoproj.io/sync-wave: "3"
      namespace: $WAIOPS_NAMESPACE
    spec:
      egress:
      - {}
      ingress:
      - {}
      podSelector: {}
      policyTypes:
      - Egress
      - Ingress
    EOF
  when: INGRESS_PATCHED==false
  register: network_patch
  ignore_errors: yes


- name: üåè CERTIFICATES - Patch AutomationUIConfig Certificates
  shell: |
    export WAIOPS_NAMESPACE=$(oc get po -A|grep aiops-orchestrator-controller |awk '{print$1}')

    oc project $WAIOPS_NAMESPACE
    NAMESPACE=$WAIOPS_NAMESPACE
    AUTO_UI_INSTANCE=$(oc get AutomationUIConfig -n $NAMESPACE --no-headers -o custom-columns=":metadata.name")
    IAF_STORAGE=$(oc get AutomationUIConfig -n $NAMESPACE -o jsonpath='{ .items[*].spec.zenService.storageClass }')
    ZEN_STORAGE=$(oc get AutomationUIConfig -n $NAMESPACE -o jsonpath='{ .items[*].spec.zenService.zenCoreMetaDbStorageClass }')

    echo "AUTO_UI_INSTANCE:   "$AUTO_UI_INSTANCE
    echo "IAF_STORAGE:        "$IAF_STORAGE
    echo "ZEN_STORAGE:        "$ZEN_STORAGE

    oc get -n $NAMESPACE AutomationUIConfig $AUTO_UI_INSTANCE --ignore-not-found -o yaml > /tmp/AutomationUIConfig-backup-$(date +%Y%m%d-%H%M).yaml
    
    if [[ ! $IAF_STORAGE == "" ]];
    then
    oc delete -n $NAMESPACE AutomationUIConfig $AUTO_UI_INSTANCE

    cat <<EOF | oc apply -f -
    apiVersion: core.automation.ibm.com/v1beta1
    kind: AutomationUIConfig
    metadata:
      name: $AUTO_UI_INSTANCE
      namespace: $NAMESPACE
    spec:
      description: AutomationUIConfig for cp4waiops
      license:
        accept: true
      version: v1.3
      zen: true
      zenService:
        iamIntegration: true
        storageClass: $IAF_STORAGE
        zenCoreMetaDbStorageClass: $ZEN_STORAGE
      tls:
        caSecret:
          key: ca.crt
          secretName: external-tls-secret
        certificateSecret:
          secretName: external-tls-secret
    EOF
    else
      echo "Couldn't get IAF_STORAGE"
    fi
  when: INGRESS_PATCHED==false
  register: certificate_patch
  ignore_errors: yes
  args:
    executable: /bin/bash


- name: üåè CERTIFICATES - Patch AutomationUIConfig Certificates
  debug: 
    var: certificate_patch



- name: üåè CERTIFICATES - Patch Ingress Certificates (you can ignore errors in this step)
  shell: |
    export WAIOPS_NAMESPACE=$(oc get po -A|grep aiops-orchestrator-controller |awk '{print$1}')

    ingress_pod=$(oc get secrets -n openshift-ingress | grep tls |grep -v router-token-| grep -v router-metrics-certs-default | awk '{print $1}')
    oc get secret -n openshift-ingress ${ingress_pod} -o jsonpath='{.data.tls\.crt}'  | base64 -d > /tmp/cert.crt
    oc get secret -n openshift-ingress ${ingress_pod} -o jsonpath='{.data.tls\.key}' | base64 -d > /tmp/cert.key
    oc get secret -n $WAIOPS_NAMESPACE iaf-system-automationui-aui-zen-ca -o jsonpath='{.data.ca\.crt}' | base64 -d > /tmp/ca.crt

    oc get secret -n $WAIOPS_NAMESPACE external-tls-secret --ignore-not-found -o yaml > /tmp/external-tls-secret-backup-$(date +%Y%m%d-%H%M).yaml
    oc delete secret -n $WAIOPS_NAMESPACE --ignore-not-found external-tls-secret
    oc create secret generic -n $WAIOPS_NAMESPACE external-tls-secret --from-file=ca.crt=/tmp/ca.crt --from-file=cert.crt=/tmp/cert.crt --from-file=cert.key=/tmp/cert.key --dry-run=client -o yaml | oc apply -f -
    REPLICAS=2
    oc scale Deployment/ibm-nginx --replicas=0
    sleep 3
    oc scale Deployment/ibm-nginx --replicas=${REPLICAS}
  when: INGRESS_PATCHED==false
  register: certificate_patch
  ignore_errors: yes

- name: üåè CERTIFICATES - Patch Ingress Certificates
  debug: 
    var: certificate_patch








# --------------------------------------------------------------------------------------------------------------------------------------
# Wait for nginx Pods
# --------------------------------------------------------------------------------------------------------------------------------------
- name: CERTIFICATES -           üï¶ Wait for nginx coming back up
  shell: |
    export WAIOPS_NAMESPACE=$(oc get po -A|grep aiops-orchestrator-controller |awk '{print$1}')
    oc get po -n $WAIOPS_NAMESPACE | grep nginx|grep -v ibm-nginx-tester|grep -v setup-nginx-job |grep "1/1"|grep -c ""
  register: kubectl_get_pods
  until: kubectl_get_pods.stdout == "2"
  retries: 50
  delay: 15



# --------------------------------------------------------------------------------------------------------------------------------------
# Wait for AutomationUIConfig ready
# --------------------------------------------------------------------------------------------------------------------------------------
# - name: CERTIFICATES -         üï¶ Wait for AutomationUIConfig being ready (this might take several minutes)
#   shell: oc get AutomationUIConfig -n $WAIOPS_NAMESPACE iaf-system  | grep True|grep -c ""
#   register: kubectl_get_pods
#   until: kubectl_get_pods.stdout == "1"
#   retries: 500
#   delay: 15


- name: SLACK -                  ü©π Patch Slack Welcome Message
  shell: |
    export WAIOPS_NAMESPACE=$(oc get po -A|grep aiops-orchestrator-controller |awk '{print$1}')

    oc set env -n $WAIOPS_NAMESPACE deployment/$(oc get deploy -n $WAIOPS_NAMESPACE -l app.kubernetes.io/component=chatops-slack-integrator -o jsonpath='{.items[*].metadata.name }') SLACK_WELCOME_COMMAND_NAME=/welcome
    oc delete pod $(oc get po -n $WAIOPS_NAMESPACE|grep slack|awk '{print$1}') -n $WAIOPS_NAMESPACE --grace-period 0 --force
  ignore_errors: yes


