---
- set_fact:
    _azure_config: "{{ all_config.azure | json_query(query) | first | default({}) }}"
  vars:
    query: >-
      [?name=='{{ _current_openshift_cluster.azure_name }}']

- name: Check if OpenShift cluster already exists by checking kubeadmin password secret
  include_role: 
    name: vault-get-secret
  vars:
    secret_name: "{{ _current_openshift_cluster.name }}-kubeadmin-password"
    secret_group: "{{ environment_name }}"
    _p_secret_variable: _kubeadmin_password

# Run OpenShift IPI installer if OpenShift cluster does not exist yet
- block:
  - name: Download OpenShift installer for version {{ _current_openshift_cluster.ocp_version }}
    include_role:
      name: openshift-download-installer
    vars:
      _p_ocp_version: "{{ _current_openshift_cluster.ocp_version }}"

  - name: Ensure .azure/osServicePrincipal.json does not exist when setting RBAC for service principal
    file:
      path: /opt/ansible/.azure/osServicePrincipal.json
      state: absent

  - name: Get Azure subscription ID
    shell: |
      az account show
    register: _az_show_account

  - set_fact:
      _subscription_id: "{{ (_az_show_account.stdout | from_json).id }}"

  - name: Create resource group {{ _azure_config.resource_group.name }} for OpenShift cluster
    shell: |
      az group create \
        --name {{ _azure_config.resource_group.name }} \
        --location {{ _azure_config.resource_group.location }} 

  - name: Create service principal {{ _current_openshift_cluster.name }}-sp for OpenShift cluster
    shell: |
      az ad sp create-for-rbac --role Contributor --name {{ _current_openshift_cluster.name }}-sp --scopes /subscriptions/{{ _subscription_id }}
    register: _az_sp_create_command

  - debug:
      var: _az_sp_create_command

  - set_fact:
      _az_sp_details: "{{ _az_sp_create_command.stdout | from_json }}"

  - name: Get object ID for service principal {{ _current_openshift_cluster.name }}-sp
    shell: |
      az ad sp show --id {{ _az_sp_details.appId }} --query id -o tsv
    register: _az_sp_obj_id

  - name: Grant User Access Administrator permissions to service principal {{ _current_openshift_cluster.name }}-sp
    shell: |
      az role assignment create --role "User Access Administrator" --assignee-object-id {{ _az_sp_obj_id.stdout }}

  - name: Generate .azure/osServicePrincipal.json in home directory
    template:
      src: osServicePrincipal.j2
      dest: /opt/ansible/.azure/osServicePrincipal.json
      mode: u+rwx

  - name: Login Azure to service principal {{ _current_openshift_cluster.name }}-sp
    shell: |
      az login --service-principal -u {{ _az_sp_details.appId }} -p {{ _az_sp_details.password }} --tenant {{ _az_sp_details.tenant }}
    register: _az_login_sp
    retries: 10
    delay: 10
    until: _az_login_sp.rc == 0

  - name: Run IPI installer for OpenShift cluster {{ _current_openshift_cluster.name }}, logs are in {{ status_dir }}/log/{{ _current_openshift_cluster.name }}-create-cluster.log
    shell: |
      openshift-install create cluster --dir={{ status_dir }}/azure/{{ _current_openshift_cluster.name }} --log-level debug >> {{ status_dir }}/log/{{ _current_openshift_cluster.name }}-create-cluster.log 2>&1
    ignore_errors: yes
    register: _openshift_install_result

  - name: Check if metadata.json was created
    stat:
      path: "{{ status_dir }}/azure/{{ _current_openshift_cluster.name }}/metadata.json"
    register: _metadata_json

  - name: Store the metadata json file as secret {{ _current_openshift_cluster.name }}-metadata-json in group {{ environment_name }}
    include_role:
      name: vault-set-secret
    vars:
      secret_name: "{{ _current_openshift_cluster.name }}-metadata-json"
      secret_group: "{{ environment_name }}"
      secret_file: "{{ status_dir }}/azure/{{ _current_openshift_cluster.name }}/metadata.json"
    when: _metadata_json.stat.exists

  - name: Fail if there were errors during the installation process
    fail:
      msg: Error occurred during OpenShift installation, check the  apply, state has been preserved. Failing now. Check the {{ status_dir }}/log/{{ _current_openshift_cluster.name }}-create-cluster.log for details
    when: 
    - _openshift_install_result.rc!=0

  - name: Retrieve kubeadmin password for OpenShift cluster {{ _current_openshift_cluster.name }}
    set_fact:
      _new_kubeadmin_password: "{{ lookup('file', status_dir + '/azure/' + _current_openshift_cluster.name + '/auth/kubeadmin-password') }}"

  - name: Store kubeadmin password into the vault
    include_role: 
      name: vault-set-secret
    vars:
      secret_name: "{{ _current_openshift_cluster.name }}-kubeadmin-password"
      secret_group: "{{ environment_name }}" 
      secret_payload: "{{ _new_kubeadmin_password }}"
  when: _kubeadmin_password==""