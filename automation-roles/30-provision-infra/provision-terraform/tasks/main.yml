---
- name: Validate mandatory variables are defined
  assert:
    that:
      - cloud_platform is defined

- name: Validate cloud_platform is implemented
  fail: msg="cloud_platform {{ cloud_platform }} is not implemented, current implemented cloud platforms are {{ implemented_cloud_platform_types }} "
  when: "cloud_platform not in implemented_cloud_platform_types"

- name: Provision IBM Cloud VPC Infrastructure
  block:

  - name: "Copy variables to Terraform directory {{status_dir}}/terraform"
    template:
      src: 'variables.auto.tfvars.j2'
      dest: '{{status_dir}}/terraform/variables.auto.tfvars'

  - name: Retrieve Terraform tfstate from the vault
    include_role: 
      name: vault-get-secret
    vars:
      secret_name: "{{ environment_name }}-terraform-tfstate"
      secret_group: "{{ environment_name }}"

  - name: Write {{ status_dir }}/terraform/terraform.tfstate file
    copy:
      content: "{{ secret_value }}"
      dest: "{{ status_dir }}/terraform/terraform.tfstate"
    when: "secret_value | trim | length > 0"

  - name: "Run terraform init in Terraform directory {{status_dir}}/terraform"
    shell: 
      chdir: '{{status_dir}}/terraform'
      cmd: 'terraform init'

  - name: "Run terraform plan in Terraform directory {{status_dir}}/terraform, check {{status_dir}}/terraform/plan.log"
    shell: |
      set -o pipefail
      terraform plan -no-color -detailed-exitcode 2>&1 \
        | tee {{status_dir}}/terraform/plan.log
    args:
      chdir: "{{status_dir}}/terraform"
    register: _terraform_plan_result
    failed_when: "_terraform_plan_result.rc == 1"

  # If there are no changes, terraform plan will return with exit code 2 (as per -detailed-exitcode)
  # Subsequent steps are skipped if no changes were planned
  - name: Determine if any changes will be made in the terraform apply
    debug:
      msg: "No changes were detected in the planning phase, apply will be skipped and tfstate secret will not be updated"
    when: "_terraform_plan_result.rc == 0"

  - set_fact:
      _plan_log: "{{ lookup('file', status_dir + '/terraform/plan.log') }}"

  - set_fact:
      _destroy_result: "{{ _plan_log | regex_search('([0-9]+) to destroy', '\\1') }}"

  - set_fact:
      _number_to_destroy: "{{ _destroy_result | first }}"
    when: _destroy_result != ''

  - name: Show number of artifacts to destroy
    debug:
      var: _number_to_destroy
    when: _number_to_destroy is defined

  - name: Fail if terraform plans to destroy artifacts and this was not confirmed at the command line
    fail:
      msg: 
      - "Terraform will destroy artifacts and this was not confirmed with --confirm-destroy or global_config confirm_destroy property"
      - "{{ _plan_log }}"
    when:
      - _number_to_destroy is defined
      - _number_to_destroy != '0'
      - _confirm_destroy | bool != True

  - name: "Run terraform apply in Terraform directory {{status_dir}}/terraform, check {{status_dir}}/terraform/apply.log"
    shell: |
      set -o pipefail
      terraform apply -auto-approve -no-color 2>&1 \
        | tee {{status_dir}}/terraform/apply.log
    args:
      chdir: "{{status_dir}}/terraform"
    environment:
      TF_LOG: "info"
      TF_LOG_PATH: "{{ status_dir }}/terraform/tf_apply.log"
    register: _terraform_apply_result
    ignore_errors: yes
    when: _terraform_plan_result.rc != 0

  - name: Store the terraform tfstate file as secret {{ environment_name }}-terraform-tfstate in group {{ environment_name }}
    include_role:
      name: vault-set-secret
    vars:
      secret_name: "{{ environment_name }}-terraform-tfstate"
      secret_group: "{{ environment_name }}"
      secret_file: "{{ status_dir }}/terraform/terraform.tfstate"
    when: 
    - _terraform_plan_result.rc != 0

  - name: Fail if there were errors during the terraform apply
    fail:
      msg: Error occurred during Terraform apply, state has been preserved. Failing now. Check the apply log for details.
    when: 
    - _terraform_plan_result.rc == 2
    - _terraform_apply_result.rc!=0

  when: "cloud_platform == 'ibm-cloud'"


