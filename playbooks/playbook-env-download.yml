---
- name: Download all assets for air-gapped install
  hosts: localhost
  connection: local
  become: True
  gather_facts: False

  vars:
    ansible_callback_diy_runner_on_skipped_msg: ""
    ansible_callback_diy_runner_on_ok_msg: ""
    ansible_callback_diy_playbook_on_include_msg: ""

  tasks:

  - block:

    - name: Load global config
      include_role:
        name: load-global-config

    - name: Load vault config
      include_role:
        name: load-vault-config

    - name: Merge configuration
      include_role:
        name: merge-config
      vars:
        path_to_config_dir: "{{ config_dir }}"
        
    - name: Validate variables
      include_role:
        name: validate-variables

    - name: Lint configuration
      include_role:
        name: lint-config
      vars:
        path_to_generators_dir: "{{ generators_dir | default([(playbook_dir | dirname),'/automation-generators'] | join) }}"

    - name: Store the entitled registry key in the vault if one was passed in the environment variable
      include_role:
        name: vault-set-secret
      vars:
        secret_name: "ibm_cp_entitlement_key"
        secret_group: "{{ environment_name }}"
        secret_payload: "{{ cp_entitlement_key }}"
      when: 
      - (cp_entitlement_key | default("")) != ""

    - name: Download CLIs
      include_role:
        name: download-cli
      when: not (cpd_check_only | default(False) | bool)

    - name: Remove case directory in case it exists
      file:
        path: "{{ status_dir }}/cp4d/case"
        state: absent

    - name: Save case files for Cloud Pak for Data
      include_role:
        name: cp4d-case-save
      loop: "{{ all_config.cp4d | default([]) }}"
      loop_control:
        loop_var: _p_current_cp4d_cluster


    # Mirror images to portable or private registry
    - block:
      - name: Get IBM Entitled Registry key
        include_role: 
          name: vault-get-secret
        vars:
          secret_name: "ibm_cp_entitlement_key"
          secret_group: "{{ environment_name }}"
          _p_secret_variable: ibm_cp_entitlement_key

      - name: Fail if the entitlement key was not found in the vault
        fail:
          msg: "Entitlement key must be stored in vault secret ibm_cp_entitlement_key."
        when: ibm_cp_entitlement_key == ""

      # Mirror to portable image registry
      - name: Mirror images to portable image registry
        include_role:
          name: cp-mirror-images
        vars:
          _p_target_registry_hostname: "{{ _v_portable_registry }}"
          _p_target_registry_port: "{{ _v_portable_registry_port }}"
          _p_case_dir: "{{ status_dir }}/cp4d/case"
        when:
        - not (cpd_skip_portable_registry | bool)

      # Mirror to private registry
      - block:

        - name: Retrieve private image registry details
          set_fact:
            _image_registry: "{{ all_config.image_registry | first | default({}) }}"

        - name: Fail if no private image registry found
          fail:
            msg: "No private image registry was found"
          when: _image_registry=={}

        - name: Mirror images from entitled to private registry
          include_role: 
            name: cp-mirror-images
          vars:
            _p_target_registry_hostname: "{{ _image_registry.registry_host_name }}"
            _p_target_registry_port: "{{ _image_registry.registry_port | default('') }}"
            _p_target_registry_namespace: "{{ _image_registry.registry_namespace | default('') }}"
            _p_target_registry_credentials_secret: "image-registry-{{ _image_registry.name }}"
            _p_case_dir: "{{ status_dir }}/cp4d/case"
        when:
        - (cpd_skip_portable_registry | bool)
      
      when:
      - not (cpd_skip_mirror | bool)
    when: not (cpd_check_only | default(False) | bool)